(()=>{"use strict";var r={129:(r,e,n)=>{n.d(e,{Z:()=>A});var t=n(537),o=n.n(t),a=n(645),i=n.n(a),s=n(667),d=n.n(s),c=new URL(n(625),n.b),l=i()(o()),p=d()(c);l.push([r.id,"*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 50px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1000px;\r\n    height: 600px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( "+p+" ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n","",{version:3,sources:["webpack://./assets/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;IACT,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,yBAAyB;IACzB,mBAAmB;IACnB,yBAAyB;IACzB,+FAA+F;AACnG;;AAEA;IACI,aAAa;IACb,WAAW;IACX,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,yFAAyF;AAC7F;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sEAAoD;IACpD,qCAAqC;AACzC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,yFAAyF;AAC7F;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB",sourcesContent:["*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 50px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1000px;\r\n    height: 600px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( './onTarget.svg' ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const A=l},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var n="",t=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),t&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=r(e),t&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(r,n,t,o,a){"string"==typeof r&&(r=[[null,r,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var c=0;c<r.length;c++){var l=[].concat(r[c]);t&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},667:r=>{r.exports=function(r,e){return e||(e={}),r?(r=String(r.__esModule?r.default:r),/^['"].*['"]$/.test(r)&&(r=r.slice(1,-1)),e.hash&&(r+=e.hash),/["'() \t\n]|(%20)/.test(r)||e.needQuotes?'"'.concat(r.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):r):r}},537:r=>{r.exports=function(r){var e=r[1],n=r[3];if(!n)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function n(r){for(var n=-1,t=0;t<e.length;t++)if(e[t].identifier===r){n=t;break}return n}function t(r,t){for(var a={},i=[],s=0;s<r.length;s++){var d=r[s],c=t.base?d[0]+t.base:d[0],l=a[c]||0,p="".concat(c," ").concat(l);a[c]=l+1;var A=n(p),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)e[A].references++,e[A].updater(u);else{var f=o(u,t);t.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(r,e){var n=e.domAPI(e);return n.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;n.update(r=e)}else n.remove()}}r.exports=function(r,o){var a=t(r=r||[],o=o||{});return function(r){r=r||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var d=t(r,o),c=0;c<a.length;c++){var l=n(a[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=d}}},569:r=>{var e={};r.exports=function(r,n){var t=function(r){if(void 0===e[r]){var n=document.querySelector(r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}e[r]=n}return e[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,n)=>{r.exports=function(r){var e=n.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=r.insertStyleElement(r);return{update:function(n){!function(r,e,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,o&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,r,e.options)}(e,r,n)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},625:(r,e,n)=>{r.exports=n.p+"102caf9dc0f7886f0c20.svg"}},e={};function n(t){var o=e[t];if(void 0!==o)return o.exports;var a=e[t]={id:t,exports:{}};return r[t](a,a.exports,n),a.exports}n.m=r,n.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return n.d(e,{a:e}),e},n.d=(r,e)=>{for(var t in e)n.o(e,t)&&!n.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),n.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),(()=>{var r;n.g.importScripts&&(r=n.g.location+"");var e=n.g.document;if(!r&&e&&(e.currentScript&&(r=e.currentScript.src),!r)){var t=e.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&!r;)r=t[o--].src}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=r})(),n.b=document.baseURI||self.location.href,n.nc=void 0;var t={};(()=>{function r(r,e){let n=JSON.stringify(e);return r.some((r=>JSON.stringify(r)===n))}n.d(t,{X:()=>k});class e{constructor(r){this.length=r,this.timesHit=0,this.sunk=!1}hit(){this.timesHit+=1,this.isSunk()}isSunk(){this.length===this.timesHit&&(this.sunk=!0)}}class o{constructor(r){this.size=r,this.board=[],this.fleet=[]}createBoard(){for(let r=0;r<this.size;r++){let e=[];this.board.push(e);for(let e=0;e<this.size;e++)this.board[r][e]=""}return this.board}makeCoordinates(r){let e=!1;for(;!e;){const n=["up","right"],t=Math.floor(Math.random()*this.size),o=Math.floor(Math.random()*this.size),a=n[Math.floor(Math.random()*n.length)];if(e=this.tryPlace(t,o,r,a),e)return this.placeShip(t,o,r,a),[t,o,r,a]}}tryPlace(r,e,n,t){let o=!1;if("up"===t){for(let t=0;t<n;t++){if(r-t<0||"object"==typeof this.board[r-t][e])return o;if(r+1<this.size&&"object"==typeof this.board[r+1][e])return o;if(r-n>0&&"object"==typeof this.board[r-n][e])return o;if(e-1>0&&"object"==typeof this.board[r-t][e-1])return o;if(e+1<this.size&&"object"==typeof this.board[r-t][e+1])return o}return o=!0,o}if("right"===t){for(let t=0;t<n;t++){if(e+t>=this.size||"object"==typeof this.board[r][e+t])return o;if(e-1>=0&&"object"==typeof this.board[r][e-1])return o;if(e+n<this.size&&"object"==typeof this.board[r][e+n])return o;if(r-1>=0&&"object"==typeof this.board[r-1][e+t])return o;if(r+1<this.size&&"object"==typeof this.board[r+1][e+t])return o}return o=!0,o}}placeShip(r,n,t,o){let a=new e(t);if("up"===o)for(let e=r;e>r-t;e--)this.board[e][n]=a;else if("right"===o)for(let e=n;e<n+t;e++)this.board[r][e]=a;return this.fleet.push(a),a}receiveAttack(r,e){return"object"==typeof this.board[r][e]?(this.board[r][e].hit(),this.board[r][e]):this.board[r][e]="miss"}allSunk(){for(let r of this.fleet)if(!1===r.sunk)return!1;return!0}}class a{constructor(r,e){this.name=r,this.board=e,this.shots=[]}boardInit(r){this.board.createBoard();for(let e of r)this.board.makeCoordinates(e);return this.board.fleet}makeShot(e=void 0,n=void 0){let t,o;if("Computer"!==this.name)return t=e,o=n,[t,o];let a=!1;for(;!a;)if("Computer"===this.name&&(t=Math.floor(Math.random()*this.board.size),o=Math.floor(Math.random()*this.board.size),!0!==r(this.shots,[t,o])))return this.shots.push([t,o]),a=!0,[t,o]}}let[i,s]=function(){let r=new a("Tony",new o(10));r.boardInit([4,3,3,2,2,2,1,1,1,1]);let e=new a("Computer",new o(10));return e.boardInit([4,3,3,2,2,2,1,1,1,1]),[r,e]}();function d(r,e){let n=document.querySelector("#status");if(n.textContent="Game is in progress",!0!==i.board.allSunk()&&!0!==s.board.allSunk()){let n=s.board.receiveAttack(r,e);l(r,e,n,s);let t=s.makeShot();n=i.board.receiveAttack(t[0],t[1]),l(t[0],t[1],n,i)}p(i),p(s),!0!==i.board.allSunk()?!0!==s.board.allSunk()||(n.textContent="You win!"):n.textContent="Computer wins!"}function c(r){const e=document.createElement("div");e.classList.add("board");for(let n=0;n<r.board.size;n++)for(let t=0;t<r.board.size;t++){let o=document.createElement("div");o.classList.add("square"),o.id=`${n}${t}${r.name}`,o.style.background="white",e.appendChild(o)}!function(r,e){const n=document.createElement("p");n.id="playerName",n.textContent=r.name;const t=document.createElement("div");t.id="boardAndName";const o=function(r){const e=document.createElement("div");e.id="sideBar";for(let n=0;n<r.board.fleet.length;n++){let t=document.createElement("div");t.classList.add("sideShip"),t.id=`${n}${r.name}`,e.appendChild(t);for(let e=0;e<r.board.fleet[n].length;e++){let r=document.createElement("div");r.classList.add("shipCell"),t.appendChild(r)}}return e}(r),a=document.querySelector("#boardsWrapper");t.appendChild(n),t.appendChild(e),t.appendChild(o),a.appendChild(t)}(r,e)}function l(r,e,n,t){let o=document.getElementById(`${r}${e}${t.name}`);"miss"===n?o.textContent="•":o.classList.add("hit")}function p(r){let e=r.board.fleet;for(let n=0;n<e.length;n++)!0===e[n].sunk&&(document.getElementById(`${n}${r.name}`).style.background="#ef4444")}document.querySelector("#restart").addEventListener("click",(()=>{i=new a("Tony",new o(10)),i.boardInit([4,3,3,2,2,2,1,1,1,1]),s=new a("Computer",new o(10)),s.boardInit([4,3,3,2,2,2,1,1,1,1]),function(){let r=document.querySelectorAll("#boardsWrapper");for(let e of r)for(;e.firstChild;)e.removeChild(e.firstChild);k()}()}));var A=n(379),u=n.n(A),f=n(795),h=n.n(f),b=n(569),x=n.n(b),m=n(565),C=n.n(m),g=n(216),y=n.n(g),I=n(589),v=n.n(I),B=n(129),w={};function k(){document.querySelector("#status").textContent="Let's Play! Hit the enemy board!",c(i),c(s),function(r){for(let n=0;n<r.board.size;n++)for(let t=0;t<r.board.size;t++)if(r.board.board[n][t]instanceof e){let e=document.getElementById(`${n}${t}${r.name}`);4===r.board.board[n][t].length?e.style.background="#86efac":3===r.board.board[n][t].length?e.style.background="#67e8f9":2===r.board.board[n][t].length?e.style.background="#d8b4fe":1===r.board.board[n][t].length&&(e.style.background="#f9a8d4")}}(i),function(){for(let r=0;r<s.board.size;r++)for(let e=0;e<s.board.size;e++)document.getElementById(`${r}${e}${s.name}`).addEventListener("click",(()=>{d(r,e)}))}()}w.styleTagTransform=v(),w.setAttributes=C(),w.insert=x().bind(null,"head"),w.domAPI=h(),w.insertStyleElement=y(),u()(B.Z,w),B.Z&&B.Z.locals&&B.Z.locals,k()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,