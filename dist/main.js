(()=>{"use strict";var r={129:(r,e,t)=>{t.d(e,{Z:()=>u});var n=t(537),o=t.n(n),a=t(645),i=t.n(a),s=t(667),c=t.n(s),d=new URL(t(625),t.b),l=i()(o()),p=c()(d);l.push([r.id,"*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 50px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n}\r\n\r\nh2{\r\n    font-size: 2.5rem;\r\n}\r\n\r\n#status{\r\n    font-size: 1.5rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1000px;\r\n    height: 600px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( "+p+" ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n","",{version:3,sources:["webpack://./assets/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;IACT,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,yBAAyB;IACzB,mBAAmB;IACnB,yBAAyB;IACzB,+FAA+F;AACnG;;AAEA;IACI,aAAa;IACb,WAAW;IACX,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,yFAAyF;AAC7F;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sEAAoD;IACpD,qCAAqC;AACzC;;AAEA;IACI,oCAAoC;AACxC",sourcesContent:["*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 50px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n}\r\n\r\nh2{\r\n    font-size: 2.5rem;\r\n}\r\n\r\n#status{\r\n    font-size: 1.5rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1000px;\r\n    height: 600px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( './onTarget.svg' ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n"],sourceRoot:""}]);const u=l},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var t="",n=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),n&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=r(e),n&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(r,t,n,o,a){"string"==typeof r&&(r=[[null,r,void 0]]);var i={};if(n)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<r.length;d++){var l=[].concat(r[d]);n&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},667:r=>{r.exports=function(r,e){return e||(e={}),r?(r=String(r.__esModule?r.default:r),/^['"].*['"]$/.test(r)&&(r=r.slice(1,-1)),e.hash&&(r+=e.hash),/["'() \t\n]|(%20)/.test(r)||e.needQuotes?'"'.concat(r.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):r):r}},537:r=>{r.exports=function(r){var e=r[1],t=r[3];if(!t)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function t(r){for(var t=-1,n=0;n<e.length;n++)if(e[n].identifier===r){t=n;break}return t}function n(r,n){for(var a={},i=[],s=0;s<r.length;s++){var c=r[s],d=n.base?c[0]+n.base:c[0],l=a[d]||0,p="".concat(d," ").concat(l);a[d]=l+1;var u=t(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(A);else{var f=o(A,n);n.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(r,e){var t=e.domAPI(e);return t.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;t.update(r=e)}else t.remove()}}r.exports=function(r,o){var a=n(r=r||[],o=o||{});return function(r){r=r||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=n(r,o),d=0;d<a.length;d++){var l=t(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:r=>{var e={};r.exports=function(r,t){var n=function(r){if(void 0===e[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(r){t=null}e[r]=t}return e[r]}(r);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,t)=>{r.exports=function(r){var e=t.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=r.insertStyleElement(r);return{update:function(t){!function(r,e,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,o&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(n,r,e.options)}(e,r,t)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},625:(r,e,t)=>{r.exports=t.p+"102caf9dc0f7886f0c20.svg"}},e={};function t(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={id:n,exports:{}};return r[n](a,a.exports,t),a.exports}t.m=r,t.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return t.d(e,{a:e}),e},t.d=(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),t.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),(()=>{var r;t.g.importScripts&&(r=t.g.location+"");var e=t.g.document;if(!r&&e&&(e.currentScript&&(r=e.currentScript.src),!r)){var n=e.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!r;)r=n[o--].src}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=r})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{function r(r,e){let t=JSON.stringify(e);return r.some((r=>JSON.stringify(r)===t))}class e{constructor(r){this.length=r,this.timesHit=0,this.sunk=!1}hit(){this.timesHit+=1,this.isSunk()}isSunk(){this.length===this.timesHit&&(this.sunk=!0)}}class n{constructor(r){this.size=r,this.board=[],this.fleet=[]}createBoard(){for(let r=0;r<this.size;r++){let e=[];this.board.push(e);for(let e=0;e<this.size;e++)this.board[r][e]=""}return this.board}makeCoordinates(r){let e=!1;for(;!e;){const t=["up","right"],n=Math.floor(Math.random()*this.size),o=Math.floor(Math.random()*this.size),a=t[Math.floor(Math.random()*t.length)];if(e=this.tryPlace(n,o,r,a),e)return this.placeShip(n,o,r,a),[n,o,r,a]}}tryPlace(r,e,t,n){let o=!1;if("up"===n){for(let n=0;n<t;n++){if(r-n<0||"object"==typeof this.board[r-n][e])return o;if(r+1<this.size&&"object"==typeof this.board[r+1][e])return o;if(r-t>0&&"object"==typeof this.board[r-t][e])return o;if(e-1>0&&"object"==typeof this.board[r-n][e-1])return o;if(e+1<this.size&&"object"==typeof this.board[r-n][e+1])return o}return o=!0,o}if("right"===n){for(let n=0;n<t;n++){if(e+n>=this.size||"object"==typeof this.board[r][e+n])return o;if(e-1>=0&&"object"==typeof this.board[r][e-1])return o;if(e+t<this.size&&"object"==typeof this.board[r][e+t])return o;if(r-1>=0&&"object"==typeof this.board[r-1][e+n])return o;if(r+1<this.size&&"object"==typeof this.board[r+1][e+n])return o}return o=!0,o}}placeShip(r,t,n,o){let a=new e(n);if("up"===o)for(let e=r;e>r-n;e--)this.board[e][t]=a;else if("right"===o)for(let e=t;e<t+n;e++)this.board[r][e]=a;return this.fleet.push(a),a}receiveAttack(r,e){return"object"==typeof this.board[r][e]?(this.board[r][e].hit(),this.board[r][e]):this.board[r][e]="miss"}allSunk(){for(let r of this.fleet)if(!1===r.sunk)return!1;return!0}}class o{constructor(r,e){this.name=r,this.board=e,this.shots=[]}boardInit(r){this.board.createBoard();for(let e of r)this.board.makeCoordinates(e);return this.board.fleet}makeShot(e=void 0,t=void 0){let n,o;if("Computer"!==this.name)return n=e,o=t,[n,o];let a=!1;for(;!a;)if("Computer"===this.name&&(n=Math.floor(Math.random()*this.board.size),o=Math.floor(Math.random()*this.board.size),!0!==r(this.shots,[n,o])))return this.shots.push([n,o]),a=!0,console.log(this.shots),[n,o]}}const a=new o("Tony",new n(10));a.boardInit([4,3,3,2,2,2,1,1,1,1]);const i=new o("Computer",new n(10));function s(r,e){if(!0!==a.board.allSunk()&&!0!==i.board.allSunk()){let t=i.board.receiveAttack(r,e);d(r,e,t,i);let n=i.makeShot();t=a.board.receiveAttack(n[0],n[1]),d(n[0],n[1],t,a)}let t=document.getElementById("status");!0!==a.board.allSunk()?!0!==i.board.allSunk()||(t.textContent="You win!"):t.textContent="Computer wins!"}function c(r){const e=document.createElement("div");e.classList.add("board");for(let t=0;t<r.board.size;t++)for(let n=0;n<r.board.size;n++){let o=document.createElement("div");o.classList.add("square"),o.id=`${t}${n}${r.name}`,o.style.background="white",e.appendChild(o)}!function(r,e){const t=document.createElement("p");t.id="playerName",t.textContent=r.name;const n=document.createElement("div");n.id="boardAndName";const o=document.querySelector("#boardsWrapper");n.appendChild(t),n.appendChild(e),o.appendChild(n)}(r,e)}function d(r,e,t,n){let o=document.getElementById(`${r}${e}${n.name}`);console.log(o,t),"miss"===t?o.textContent="•":o.classList.add("hit")}i.boardInit([4,3,3,2,2,2,1,1,1,1]),console.log(a.board.board),console.log(i.board.board),t(625);var l=t(379),p=t.n(l),u=t(795),A=t.n(u),f=t(569),h=t.n(f),b=t(565),m=t.n(b),x=t(216),g=t.n(x),y=t(589),C=t.n(y),v=t(129),I={};I.styleTagTransform=C(),I.setAttributes=m(),I.insert=h().bind(null,"head"),I.domAPI=A(),I.insertStyleElement=g(),p()(v.Z,I),v.Z&&v.Z.locals&&v.Z.locals,c(a),c(i),function(r){for(let t=0;t<r.board.size;t++)for(let n=0;n<r.board.size;n++)if(r.board.board[t][n]instanceof e){let e=document.getElementById(`${t}${n}${r.name}`);4===r.board.board[t][n].length?e.style.background="#86efac":3===r.board.board[t][n].length?e.style.background="#67e8f9":2===r.board.board[t][n].length?e.style.background="#d8b4fe":1===r.board.board[t][n].length&&(e.style.background="#f9a8d4")}}(a),function(){for(let r=0;r<i.board.size;r++)for(let e=0;e<i.board.size;e++)document.getElementById(`${r}${e}${i.name}`).addEventListener("click",(()=>{s(r,e)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,