(()=>{"use strict";var r={129:(r,n,e)=>{e.d(n,{Z:()=>p});var t=e(537),o=e.n(t),i=e(645),a=e.n(i),s=e(667),d=e.n(s),c=new URL(e(625),e.b),l=a()(o()),A=d()(c);l.push([r.id,"*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n    background-color: #f5f3ff;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1100px;\r\n    height: 700px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n#playerName{\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( "+A+" ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n","",{version:3,sources:["webpack://./assets/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;IACd,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;IACT,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,yBAAyB;IACzB,mBAAmB;IACnB,yBAAyB;IACzB,+FAA+F;AACnG;;AAEA;IACI,aAAa;IACb,WAAW;IACX,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,yFAAyF;AAC7F;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sEAAoD;IACpD,qCAAqC;AACzC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,yFAAyF;AAC7F;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB",sourcesContent:["*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n    background-color: #f5f3ff;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1100px;\r\n    height: 700px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n#playerName{\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( './onTarget.svg' ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const p=l},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var c=0;c<r.length;c++){var l=[].concat(r[c]);t&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},667:r=>{r.exports=function(r,n){return n||(n={}),r?(r=String(r.__esModule?r.default:r),/^['"].*['"]$/.test(r)&&(r=r.slice(1,-1)),n.hash&&(r+=n.hash),/["'() \t\n]|(%20)/.test(r)||n.needQuotes?'"'.concat(r.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):r):r}},537:r=>{r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:r=>{var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var i={},a=[],s=0;s<r.length;s++){var d=r[s],c=t.base?d[0]+t.base:d[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var p=e(A),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var f=o(u,t);t.byIndex=s,n.splice(s,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var i=t(r=r||[],o=o||{});return function(r){r=r||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var d=t(r,o),c=0;c<i.length;c++){var l=e(i[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=d}}},569:r=>{var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:(r,n,e)=>{r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}},625:(r,n,e)=>{r.exports=e.p+"102caf9dc0f7886f0c20.svg"}},n={};function e(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={id:t,exports:{}};return r[t](i,i.exports,e),i.exports}e.m=r,e.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return e.d(n,{a:n}),n},e.d=(r,n)=>{for(var t in n)e.o(n,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:n[t]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),e.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),(()=>{var r;e.g.importScripts&&(r=e.g.location+"");var n=e.g.document;if(!r&&n&&(n.currentScript&&(r=n.currentScript.src),!r)){var t=n.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&!r;)r=t[o--].src}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=r})(),e.b=document.baseURI||self.location.href,e.nc=void 0;var t={};(()=>{function r(r,n){let e=JSON.stringify(n);return r.some((r=>JSON.stringify(r)===e))}function n(r,n,e,t){let i=!1;if("up"===t){for(let t=0;t<e;t++){if(r-t<0||this.board[r-t][n]instanceof o)return i;if(r-e>=0&&this.board[r-e][n]instanceof o)return i;if(n+1<this.size&&this.board[r-t][n+1]instanceof o)return i;if(r+1<this.size&&this.board[r+1][n]instanceof o)return i;if(n-1>=0&&this.board[r-t][n-1]instanceof o)return i;if(r-e>=0&&n-1>=0&&this.board[r-e][n-1]instanceof o)return i;if(r-e>=0&&n+1<this.size&&this.board[r-e][n+1]instanceof o)return i;if(r+1<this.size&&n+1<this.size&&this.board[r+1][n+1]instanceof o)return i;if(r+1<this.size&&n-1>=0&&this.board[r+1][n-1]instanceof o)return i}return i=!0,i}if("right"===t){for(let t=0;t<e;t++){if(n+t>=this.size||this.board[r][n+t]instanceof o)return i;if(n-1>=0&&this.board[r][n-1]instanceof o)return i;if(r-1>=0&&this.board[r-1][n+t]instanceof o)return i;if(n+e<this.size&&this.board[r][n+e]instanceof o)return i;if(r+1<this.size&&this.board[r+1][n+t]instanceof o)return i;if(n-1>=0&&r+1<this.size&&this.board[r+1][n-1]instanceof o)return i;if(n-1>=0&&r-1>=0&&this.board[r-1][n-1]instanceof o)return i;if(n+e<this.size&&r-1>=0&&this.board[r-1][n+e]instanceof o)return i;if(n+e<this.size&&r+1<this.size&&this.board[r+1][n+e]instanceof o)return i}return i=!0,i}}e.d(t,{X:()=>z});class o{constructor(r){this.length=r,this.timesHit=0,this.sunk=!1,this.coords=[]}hit(){this.timesHit+=1,this.isSunk()}isSunk(){this.length===this.timesHit&&(this.sunk=!0)}}class i{constructor(r){this.size=r,this.board=[],this.fleet=[]}createBoard(){for(let r=0;r<this.size;r++){let n=[];this.board.push(n);for(let n=0;n<this.size;n++)this.board[r][n]=""}return this.board}makeCoordinates(r){let e=!1;for(;!e;){const t=["up","right"],o=Math.floor(Math.random()*this.size),i=Math.floor(Math.random()*this.size),a=t[Math.floor(Math.random()*t.length)];if(e=n.call(this,o,i,r,a),e)return this.placeShip(o,i,r,a),[o,i,r,a]}}placeShip(r,n,e,t){let i=new o(e);if("up"===t)for(let t=r;t>r-e;t--)this.board[t][n]=i,i.coords.push([t,n]);else if("right"===t)for(let t=n;t<n+e;t++)this.board[r][t]=i,i.coords.push([r,t]);return this.fleet.push(i),i}receiveAttack(r,n){return this.board[r][n]instanceof o?(this.board[r][n].hit(),this.board[r][n]):this.board[r][n]="miss"}allSunk(){for(let r of this.fleet)if(!1===r.sunk)return!1;return!0}}class a{constructor(r,n){this.name=r,this.board=n,this.shots=[],this.q=[]}boardInit(r){this.board.createBoard();for(let n of r)this.board.makeCoordinates(n);return this.board.fleet}makeShot(n=void 0,e=void 0){let t=!1;if(0!==this.q.length)for(;!t;){let[n,e]=this.q[0];if(this.q.shift(),!0!==r(this.shots,[n,e]))return this.shots.push([n,e]),t=!0,[n,e]}for(;!t;)if(n=Math.floor(Math.random()*this.board.size),e=Math.floor(Math.random()*this.board.size),!0!==r(this.shots,[n,e]))return this.shots.push([n,e]),t=!0,[n,e]}}let[s,d]=function(){let r=new a("Tony",new i(10));r.boardInit([4,3,3,2,2,2,1,1,1,1]);let n=new a("Computer",new i(10));return n.boardInit([4,3,3,2,2,2,1,1,1,1]),[r,n]}();function c(n,e){let t=document.querySelector("#status");t.textContent="Game is in progress",!0!==r(s.shots,[n,e])&&!0!==s.board.allSunk()&&!0!==d.board.allSunk()&&(function(r,n){let e=d.board.receiveAttack(r,n);s.shots.push([r,n]),A(r,n,e,d),p(d)}(n,e),function(r){for(let n of r.board.fleet)if(!0===n.sunk)for(let e of n.coords){let[t,o]=e,i=document.getElementById(`${t}${o}${r.name}`);4===n.length?i.style.background="#86efac":3===n.length?i.style.background="#67e8f9":2===n.length?i.style.background="#d8b4fe":1===n.length&&(i.style.background="#f9a8d4")}}(d),function(){let n=d.makeShot(),e=s.board.receiveAttack(n[0],n[1]);A(n[0],n[1],e,s),p(s),function(n,e,t,i){let a=[[-1,0],[0,1],[1,0],[0,-1]];if(e instanceof o&&!0!==e.sunk)for(let r of a){let[e,o]=r,a=[t+e,i+o];t+e>=0&&i+o>=0&&t+e<n.board.size&&i+o<n.board.size&&(console.log(n.shots),n.q.push(a))}else!0===e.sunk&&(function(n,e){let t=[[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1]];for(let o of n.coords){let[n,i]=o;for(let o of t){let[t,a]=o;if(n+t>=0&&i+a>=0&&n+t<e.board.size&&i+a<e.board.size&&!0!==r(e.shots,[n+t,i+a])){let r=[n+t,i+a];e.shots.push(r)}}}}(e,n),n.q=[])}(d,e,n[0],n[1])}()),!0!==d.board.allSunk()?!0!==s.board.allSunk()||(t.textContent="Computer wins!"):t.textContent="You win!"}function l(r){const n=document.createElement("div");n.classList.add("board");for(let e=0;e<r.board.size;e++)for(let t=0;t<r.board.size;t++){let o=document.createElement("div");o.classList.add("square"),o.id=`${e}${t}${r.name}`,o.style.background="white",n.appendChild(o)}!function(r,n){const e=document.createElement("p");e.id="playerName",e.textContent=r.name;const t=document.createElement("div");t.id="boardAndName";const o=function(r){const n=document.createElement("div");n.id="sideBar";for(let e=0;e<r.board.fleet.length;e++){let t=document.createElement("div");t.classList.add("sideShip"),t.id=`${e}${r.name}`,n.appendChild(t);for(let n=0;n<r.board.fleet[e].length;n++){let r=document.createElement("div");r.classList.add("shipCell"),t.appendChild(r)}}return n}(r),i=document.querySelector("#boardsWrapper");t.appendChild(e),t.appendChild(n),t.appendChild(o),i.appendChild(t)}(r,n)}function A(r,n,e,t){let o=document.getElementById(`${r}${n}${t.name}`);"miss"===e?o.textContent="•":o.classList.add("hit")}function p(r){let n=r.board.fleet;for(let e=0;e<n.length;e++)!0===n[e].sunk&&(document.getElementById(`${e}${r.name}`).style.background="#ef4444")}document.querySelector("#restart").addEventListener("click",(()=>{s=new a("Tony",new i(10)),s.boardInit([4,3,3,2,2,2,1,1,1,1]),d=new a("Computer",new i(10)),d.boardInit([4,3,3,2,2,2,1,1,1,1]),function(){let r=document.querySelectorAll("#boardsWrapper");for(let n of r)for(;n.firstChild;)n.removeChild(n.firstChild);z()}()}));var u=e(379),f=e.n(u),h=e(795),b=e.n(h),x=e(569),m=e.n(x),g=e(565),C=e.n(g),y=e(216),I=e.n(y),v=e(589),B=e.n(v),w=e(129),k={};function z(){document.querySelector("#status").textContent="Let's Play! Hit the enemy board!",l(s),l(d),function(r){for(let n of r.board.fleet)for(let e of n.coords){let[t,o]=e,i=document.getElementById(`${t}${o}${r.name}`);4===n.length?i.style.background="#86efac":3===n.length?i.style.background="#67e8f9":2===n.length?i.style.background="#d8b4fe":1===n.length&&(i.style.background="#f9a8d4")}}(s),function(){for(let r=0;r<d.board.size;r++)for(let n=0;n<d.board.size;n++)document.getElementById(`${r}${n}${d.name}`).addEventListener("click",(()=>{c(r,n)}))}()}k.styleTagTransform=B(),k.setAttributes=C(),k.insert=m().bind(null,"head"),k.domAPI=b(),k.insertStyleElement=I(),f()(w.Z,k),w.Z&&w.Z.locals&&w.Z.locals,z()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,