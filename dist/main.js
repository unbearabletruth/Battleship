(()=>{"use strict";var r={129:(r,n,e)=>{e.d(n,{Z:()=>p});var t=e(537),o=e.n(t),i=e(645),a=e.n(i),s=e(667),d=e.n(s),c=new URL(e(625),e.b),l=a()(o()),A=d()(c);l.push([r.id,"*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n    background-color: #f5f3ff;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1100px;\r\n    height: 700px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n#playerName{\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( "+A+" ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n","",{version:3,sources:["webpack://./assets/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;IACd,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;IACT,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,yBAAyB;IACzB,mBAAmB;IACnB,yBAAyB;IACzB,+FAA+F;AACnG;;AAEA;IACI,aAAa;IACb,WAAW;IACX,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,yFAAyF;AAC7F;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sEAAoD;IACpD,qCAAqC;AACzC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,yFAAyF;AAC7F;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB",sourcesContent:["*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n    background-color: #f5f3ff;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1100px;\r\n    height: 700px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n#playerName{\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( './onTarget.svg' ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const p=l},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var c=0;c<r.length;c++){var l=[].concat(r[c]);t&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},667:r=>{r.exports=function(r,n){return n||(n={}),r?(r=String(r.__esModule?r.default:r),/^['"].*['"]$/.test(r)&&(r=r.slice(1,-1)),n.hash&&(r+=n.hash),/["'() \t\n]|(%20)/.test(r)||n.needQuotes?'"'.concat(r.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):r):r}},537:r=>{r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:r=>{var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var i={},a=[],s=0;s<r.length;s++){var d=r[s],c=t.base?d[0]+t.base:d[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var p=e(A),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var f=o(u,t);t.byIndex=s,n.splice(s,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var i=t(r=r||[],o=o||{});return function(r){r=r||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var d=t(r,o),c=0;c<i.length;c++){var l=e(i[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=d}}},569:r=>{var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:(r,n,e)=>{r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}},625:(r,n,e)=>{r.exports=e.p+"102caf9dc0f7886f0c20.svg"}},n={};function e(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={id:t,exports:{}};return r[t](i,i.exports,e),i.exports}e.m=r,e.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return e.d(n,{a:n}),n},e.d=(r,n)=>{for(var t in n)e.o(n,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:n[t]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),e.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),(()=>{var r;e.g.importScripts&&(r=e.g.location+"");var n=e.g.document;if(!r&&n&&(n.currentScript&&(r=n.currentScript.src),!r)){var t=n.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&!r;)r=t[o--].src}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=r})(),e.b=document.baseURI||self.location.href,e.nc=void 0;var t={};(()=>{function r(r,n){let e=JSON.stringify(n);return r.some((r=>JSON.stringify(r)===e))}e.d(t,{X:()=>k});class n{constructor(r){this.length=r,this.timesHit=0,this.sunk=!1,this.coords=[]}hit(){this.timesHit+=1,this.isSunk()}isSunk(){this.length===this.timesHit&&(this.sunk=!0)}}class o{constructor(r){this.size=r,this.board=[],this.fleet=[]}createBoard(){for(let r=0;r<this.size;r++){let n=[];this.board.push(n);for(let n=0;n<this.size;n++)this.board[r][n]=""}return this.board}makeCoordinates(r){let n=!1;for(;!n;){const e=["up","right"],t=Math.floor(Math.random()*this.size),o=Math.floor(Math.random()*this.size),i=e[Math.floor(Math.random()*e.length)];if(n=this.tryPlace(t,o,r,i),n)return this.placeShip(t,o,r,i),[t,o,r,i]}}tryPlace(r,e,t,o){let i=!1;if("up"===o){for(let o=0;o<t;o++){if(r-o<0||this.board[r-o][e]instanceof n)return i;if(r-t>=0&&this.board[r-t][e]instanceof n)return i;if(e+1<this.size&&this.board[r-o][e+1]instanceof n)return i;if(r+1<this.size&&this.board[r+1][e]instanceof n)return i;if(e-1>=0&&this.board[r-o][e-1]instanceof n)return i;if(r-t>=0&&e-1>=0&&this.board[r-t][e-1]instanceof n)return i;if(r-t>=0&&e+1<this.size&&this.board[r-t][e+1]instanceof n)return i;if(r+1<this.size&&e+1<this.size&&this.board[r+1][e+1]instanceof n)return i;if(r+1<this.size&&e-1>=0&&this.board[r+1][e-1]instanceof n)return i}return i=!0,i}if("right"===o){for(let o=0;o<t;o++){if(e+o>=this.size||this.board[r][e+o]instanceof n)return i;if(e-1>=0&&this.board[r][e-1]instanceof n)return i;if(r-1>=0&&this.board[r-1][e+o]instanceof n)return i;if(e+t<this.size&&this.board[r][e+t]instanceof n)return i;if(r+1<this.size&&this.board[r+1][e+o]instanceof n)return i;if(e-1>=0&&r+1<this.size&&this.board[r+1][e-1]instanceof n)return i;if(e-1>=0&&r-1>=0&&this.board[r-1][e-1]instanceof n)return i;if(e+t<this.size&&r-1>=0&&this.board[r-1][e+t]instanceof n)return i;if(e+t<this.size&&r+1<this.size&&this.board[r+1][e+t]instanceof n)return i}return i=!0,i}}placeShip(r,e,t,o){let i=new n(t);if("up"===o)for(let n=r;n>r-t;n--)this.board[n][e]=i,i.coords.push([n,e]);else if("right"===o)for(let n=e;n<e+t;n++)this.board[r][n]=i,i.coords.push([r,n]);return this.fleet.push(i),i}receiveAttack(r,e){return this.board[r][e]instanceof n?(this.board[r][e].hit(),this.board[r][e]):this.board[r][e]="miss"}allSunk(){for(let r of this.fleet)if(!1===r.sunk)return!1;return!0}}class i{constructor(r,n){this.name=r,this.board=n,this.shots=[]}boardInit(r){this.board.createBoard();for(let n of r)this.board.makeCoordinates(n);return this.board.fleet}makeShot(){let n,e,t=!1;for(;!t;)if(n=Math.floor(Math.random()*this.board.size),e=Math.floor(Math.random()*this.board.size),!0!==r(this.shots,[n,e]))return this.shots.push([n,e]),t=!0,[n,e]}}let[a,s]=function(){let r=new i("Tony",new o(10));r.boardInit([4,3,3,2,2,2,1,1,1,1]);let n=new i("Computer",new o(10));return n.boardInit([4,3,3,2,2,2,1,1,1,1]),[r,n]}();function d(n,e){let t=document.querySelector("#status");t.textContent="Game is in progress",!0!==r(a.shots,[n,e])&&!0!==a.board.allSunk()&&!0!==s.board.allSunk()&&(function(r,n){let e=s.board.receiveAttack(r,n);a.shots.push([r,n]),l(r,n,e,s),A(s)}(n,e),function(r){for(let n of r.board.fleet)if(!0===n.sunk)for(let e of n.coords){let[t,o]=e,i=document.getElementById(`${t}${o}${r.name}`);4===n.length?i.style.background="#86efac":3===n.length?i.style.background="#67e8f9":2===n.length?i.style.background="#d8b4fe":1===n.length&&(i.style.background="#f9a8d4")}}(s),function(){let r=s.makeShot(),n=a.board.receiveAttack(r[0],r[1]);l(r[0],r[1],n,a),A(a)}()),!0!==a.board.allSunk()?!0!==s.board.allSunk()||(t.textContent="You win!"):t.textContent="Computer wins!"}function c(r){const n=document.createElement("div");n.classList.add("board");for(let e=0;e<r.board.size;e++)for(let t=0;t<r.board.size;t++){let o=document.createElement("div");o.classList.add("square"),o.id=`${e}${t}${r.name}`,o.style.background="white",n.appendChild(o)}!function(r,n){const e=document.createElement("p");e.id="playerName",e.textContent=r.name;const t=document.createElement("div");t.id="boardAndName";const o=function(r){const n=document.createElement("div");n.id="sideBar";for(let e=0;e<r.board.fleet.length;e++){let t=document.createElement("div");t.classList.add("sideShip"),t.id=`${e}${r.name}`,n.appendChild(t);for(let n=0;n<r.board.fleet[e].length;n++){let r=document.createElement("div");r.classList.add("shipCell"),t.appendChild(r)}}return n}(r),i=document.querySelector("#boardsWrapper");t.appendChild(e),t.appendChild(n),t.appendChild(o),i.appendChild(t)}(r,n)}function l(r,n,e,t){let o=document.getElementById(`${r}${n}${t.name}`);"miss"===e?o.textContent="•":o.classList.add("hit")}function A(r){let n=r.board.fleet;for(let e=0;e<n.length;e++)!0===n[e].sunk&&(document.getElementById(`${e}${r.name}`).style.background="#ef4444")}document.querySelector("#restart").addEventListener("click",(()=>{a=new i("Tony",new o(10)),a.boardInit([4,3,3,2,2,2,1,1,1,1]),s=new i("Computer",new o(10)),s.boardInit([4,3,3,2,2,2,1,1,1,1]),function(){let r=document.querySelectorAll("#boardsWrapper");for(let n of r)for(;n.firstChild;)n.removeChild(n.firstChild);k()}()}));var p=e(379),u=e.n(p),f=e(795),h=e.n(f),b=e(569),x=e.n(b),m=e(565),g=e.n(m),C=e(216),y=e.n(C),I=e(589),v=e.n(I),B=e(129),w={};function k(){document.querySelector("#status").textContent="Let's Play! Hit the enemy board!",c(a),c(s),function(r){for(let n of r.board.fleet)for(let e of n.coords){let[t,o]=e,i=document.getElementById(`${t}${o}${r.name}`);4===n.length?i.style.background="#86efac":3===n.length?i.style.background="#67e8f9":2===n.length?i.style.background="#d8b4fe":1===n.length&&(i.style.background="#f9a8d4")}}(a),function(){for(let r=0;r<s.board.size;r++)for(let n=0;n<s.board.size;n++)document.getElementById(`${r}${n}${s.name}`).addEventListener("click",(()=>{d(r,n)}))}()}w.styleTagTransform=v(),w.setAttributes=g(),w.insert=x().bind(null,"head"),w.domAPI=h(),w.insertStyleElement=y(),u()(B.Z,w),B.Z&&B.Z.locals&&B.Z.locals,k()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,