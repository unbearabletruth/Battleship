(()=>{"use strict";var r={129:(r,e,n)=>{n.d(e,{Z:()=>A});var t=n(537),o=n.n(t),a=n(645),i=n.n(a),s=n(667),l=n.n(s),d=new URL(n(625),n.b),c=i()(o()),p=l()(d);c.push([r.id,"*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n    background-color: #f5f3ff;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1100px;\r\n    height: 700px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n#playerName{\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( "+p+" ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n","",{version:3,sources:["webpack://./assets/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;IACd,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;IACT,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,yBAAyB;IACzB,mBAAmB;IACnB,yBAAyB;IACzB,+FAA+F;AACnG;;AAEA;IACI,aAAa;IACb,WAAW;IACX,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,yFAAyF;AAC7F;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sEAAoD;IACpD,qCAAqC;AACzC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,yFAAyF;AAC7F;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB",sourcesContent:["*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n    background-color: #f5f3ff;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1100px;\r\n    height: 700px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n#playerName{\r\n    font-size: 1.1rem;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( './onTarget.svg' ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const A=c},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var n="",t=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),t&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=r(e),t&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(r,n,t,o,a){"string"==typeof r&&(r=[[null,r,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<r.length;d++){var c=[].concat(r[d]);t&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},667:r=>{r.exports=function(r,e){return e||(e={}),r?(r=String(r.__esModule?r.default:r),/^['"].*['"]$/.test(r)&&(r=r.slice(1,-1)),e.hash&&(r+=e.hash),/["'() \t\n]|(%20)/.test(r)||e.needQuotes?'"'.concat(r.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):r):r}},537:r=>{r.exports=function(r){var e=r[1],n=r[3];if(!n)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function n(r){for(var n=-1,t=0;t<e.length;t++)if(e[t].identifier===r){n=t;break}return n}function t(r,t){for(var a={},i=[],s=0;s<r.length;s++){var l=r[s],d=t.base?l[0]+t.base:l[0],c=a[d]||0,p="".concat(d," ").concat(c);a[d]=c+1;var A=n(p),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)e[A].references++,e[A].updater(u);else{var f=o(u,t);t.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(r,e){var n=e.domAPI(e);return n.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;n.update(r=e)}else n.remove()}}r.exports=function(r,o){var a=t(r=r||[],o=o||{});return function(r){r=r||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var l=t(r,o),d=0;d<a.length;d++){var c=n(a[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=l}}},569:r=>{var e={};r.exports=function(r,n){var t=function(r){if(void 0===e[r]){var n=document.querySelector(r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}e[r]=n}return e[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,n)=>{r.exports=function(r){var e=n.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=r.insertStyleElement(r);return{update:function(n){!function(r,e,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,o&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,r,e.options)}(e,r,n)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},625:(r,e,n)=>{r.exports=n.p+"102caf9dc0f7886f0c20.svg"}},e={};function n(t){var o=e[t];if(void 0!==o)return o.exports;var a=e[t]={id:t,exports:{}};return r[t](a,a.exports,n),a.exports}n.m=r,n.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return n.d(e,{a:e}),e},n.d=(r,e)=>{for(var t in e)n.o(e,t)&&!n.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),n.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),(()=>{var r;n.g.importScripts&&(r=n.g.location+"");var e=n.g.document;if(!r&&e&&(e.currentScript&&(r=e.currentScript.src),!r)){var t=e.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&!r;)r=t[o--].src}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=r})(),n.b=document.baseURI||self.location.href,n.nc=void 0;var t={};(()=>{function r(r,e){let n=JSON.stringify(e);return r.some((r=>JSON.stringify(r)===n))}function e(r,e,n,t){let a=!1,i=[[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1]],s=[];for(let o=0;o<n;o++)if("up"===t&&r-o>=0){let n=[r-o,e];s.push(n)}else{if(!("right"===t&&e+o<this.size))return a;{let n=[r,e+o];s.push(n)}}for(let r of s){let[e,n]=r;if(this.board[e][n]instanceof o)return a;for(let r of i){let[t,i]=r;if(e+t>=0&&n+i>=0&&e+t<this.size&&n+i<this.size&&this.board[e+t][n+i]instanceof o)return a}}return a=!0,a}n.d(t,{X:()=>E});class o{constructor(r){this.length=r,this.timesHit=0,this.sunk=!1,this.coords=[]}hit(){this.timesHit+=1,this.isSunk()}isSunk(){this.length===this.timesHit&&(this.sunk=!0)}}class a{constructor(r){this.size=r,this.board=[],this.fleet=[]}createBoard(){for(let r=0;r<this.size;r++){let e=[];this.board.push(e);for(let e=0;e<this.size;e++)this.board[r][e]=""}return this.board}makeCoordinates(r){let n=!1;for(;!n;){const t=["up","right"],o=Math.floor(Math.random()*this.size),a=Math.floor(Math.random()*this.size),i=t[Math.floor(Math.random()*t.length)];if(n=e.call(this,o,a,r,i),n)return this.placeShip(o,a,r,i),[o,a,r,i]}}placeShip(r,e,n,t){let a=new o(n);if("up"===t)for(let t=r;t>r-n;t--)this.board[t][e]=a,a.coords.push([t,e]);else if("right"===t)for(let t=e;t<e+n;t++)this.board[r][t]=a,a.coords.push([r,t]);return this.fleet.push(a),a}receiveAttack(r,e){return this.board[r][e]instanceof o?(this.board[r][e].hit(),this.board[r][e]):this.board[r][e]="miss"}allSunk(){for(let r of this.fleet)if(!1===r.sunk)return!1;return!0}}class i{constructor(r,e){this.name=r,this.board=e,this.shots=[],this.q=[]}boardInit(r){this.board.createBoard();for(let e of r)this.board.makeCoordinates(e);return this.board.fleet}makeShot(e=void 0,n=void 0){let t=!1;if(0!==this.q.length)for(;!t;){let[e,n]=this.q[0];if(this.q.shift(),!0!==r(this.shots,[e,n]))return this.shots.push([e,n]),t=!0,[e,n]}for(;!t;)if(e=Math.floor(Math.random()*this.board.size),n=Math.floor(Math.random()*this.board.size),!0!==r(this.shots,[e,n]))return this.shots.push([e,n]),t=!0,[e,n]}}let[s,l]=function(){let r=new i("Tony",new a(10));r.boardInit([4,3,3,2,2,2,1,1,1,1]);let e=new i("Computer",new a(10));return e.boardInit([4,3,3,2,2,2,1,1,1,1]),[r,e]}();function d(e,n){let t=document.querySelector("#status");t.textContent="Game is in progress",!0!==r(s.shots,[e,n])&&!0!==s.board.allSunk()&&!0!==l.board.allSunk()&&(function(r,e){let n=l.board.receiveAttack(r,e);s.shots.push([r,e]),p(r,e,n,l),A(l)}(e,n),function(r){for(let e of r.board.fleet)if(!0===e.sunk)for(let n of e.coords){let[t,o]=n,a=document.getElementById(`${t}${o}${r.name}`);4===e.length?a.style.background="#86efac":3===e.length?a.style.background="#67e8f9":2===e.length?a.style.background="#d8b4fe":1===e.length&&(a.style.background="#f9a8d4")}}(l),function(){let e=l.makeShot(),n=s.board.receiveAttack(e[0],e[1]);p(e[0],e[1],n,s),A(s),function(e,n,t,a){let i=[[-1,0],[0,1],[1,0],[0,-1]];if(n instanceof o&&!0!==n.sunk)for(let r of i){let[n,o]=r,i=[t+n,a+o];t+n>=0&&a+o>=0&&t+n<e.board.size&&a+o<e.board.size&&e.q.push(i)}else!0===n.sunk&&(function(e,n){let t=[[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1]];for(let o of e.coords){let[e,a]=o;for(let o of t){let[t,i]=o;if(e+t>=0&&a+i>=0&&e+t<n.board.size&&a+i<n.board.size&&!0!==r(n.shots,[e+t,a+i])){let r=[e+t,a+i];n.shots.push(r)}}}}(n,e),e.q=[])}(l,n,e[0],e[1])}()),!0!==l.board.allSunk()?!0!==s.board.allSunk()||(t.textContent="Computer wins!"):t.textContent="You win!"}function c(r){const e=document.createElement("div");e.classList.add("board");for(let n=0;n<r.board.size;n++)for(let t=0;t<r.board.size;t++){let o=document.createElement("div");o.classList.add("square"),o.id=`${n}${t}${r.name}`,o.style.background="white",e.appendChild(o)}!function(r,e){const n=document.createElement("p");n.id="playerName",n.textContent=r.name;const t=document.createElement("div");t.id="boardAndName";const o=function(r){const e=document.createElement("div");e.id="sideBar";for(let n=0;n<r.board.fleet.length;n++){let t=document.createElement("div");t.classList.add("sideShip"),t.id=`${n}${r.name}`,e.appendChild(t);for(let e=0;e<r.board.fleet[n].length;e++){let r=document.createElement("div");r.classList.add("shipCell"),t.appendChild(r)}}return e}(r),a=document.querySelector("#boardsWrapper");t.appendChild(n),t.appendChild(e),t.appendChild(o),a.appendChild(t)}(r,e)}function p(r,e,n,t){let o=document.getElementById(`${r}${e}${t.name}`);"miss"===n?o.textContent="•":o.classList.add("hit")}function A(r){let e=r.board.fleet;for(let n=0;n<e.length;n++)!0===e[n].sunk&&(document.getElementById(`${n}${r.name}`).style.background="#ef4444")}document.querySelector("#restart").addEventListener("click",(()=>{s=new i("Tony",new a(10)),s.boardInit([4,3,3,2,2,2,1,1,1,1]),l=new i("Computer",new a(10)),l.boardInit([4,3,3,2,2,2,1,1,1,1]),function(){let r=document.querySelectorAll("#boardsWrapper");for(let e of r)for(;e.firstChild;)e.removeChild(e.firstChild);E()}()}));var u=n(379),f=n.n(u),h=n(795),b=n.n(h),x=n(569),m=n.n(x),g=n(565),C=n.n(g),y=n(216),I=n.n(y),v=n(589),B=n.n(v),w=n(129),k={};function E(){document.querySelector("#status").textContent="Let's Play! Hit the enemy board!",c(s),c(l),function(r){for(let e of r.board.fleet)for(let n of e.coords){let[t,o]=n,a=document.getElementById(`${t}${o}${r.name}`);4===e.length?a.style.background="#86efac":3===e.length?a.style.background="#67e8f9":2===e.length?a.style.background="#d8b4fe":1===e.length&&(a.style.background="#f9a8d4")}}(s),function(){for(let r=0;r<l.board.size;r++)for(let e=0;e<l.board.size;e++)document.getElementById(`${r}${e}${l.name}`).addEventListener("click",(()=>{d(r,e)}))}()}k.styleTagTransform=B(),k.setAttributes=C(),k.insert=m().bind(null,"head"),k.domAPI=b(),k.insertStyleElement=I(),f()(w.Z,k),w.Z&&w.Z.locals&&w.Z.locals,E()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,