(()=>{"use strict";var e={129:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(537),o=r.n(n),a=r(645),i=r.n(a)()(o());i.push([e.id,"*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    gap: 50px;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid black;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid black;\r\n    cursor: pointer;\r\n}","",{version:3,sources:["webpack://./assets/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,eAAe;AACnB",sourcesContent:["*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    gap: 50px;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid black;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid black;\r\n    cursor: pointer;\r\n}"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);n&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],d=n.base?c[0]+n.base:c[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var f=r(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var p=o(h,n);n.byIndex=s,t.splice(s,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=r(a[i]);t[s].references--}for(var c=n(e,o),d=0;d<a.length;d++){var l=r(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=c}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{function e(e,t){let r=JSON.stringify(t);return e.some((function(e){return JSON.stringify(e)===r}))}class t{constructor(e){this.length=e,this.timesHit=0,this.sunk=!1}hit(){this.timesHit+=1,this.isSunk()}isSunk(){this.length===this.timesHit&&(this.sunk=!0)}}class n{constructor(e){this.size=e,this.board=[],this.fleet=[]}createBoard(){for(let e=0;e<this.size;e++){let t=[];this.board.push(t);for(let t=0;t<this.size;t++)this.board[e][t]=""}return this.board}makeCoordinates(e){let t=!1;for(;!t;){const r=["up","right"],n=Math.floor(Math.random()*this.size),o=Math.floor(Math.random()*this.size),a=r[Math.floor(Math.random()*r.length)];if(t=this.tryPlace(n,o,e,a),t)return this.placeShip(n,o,e,a),[n,o,e,a]}}tryPlace(e,t,r,n){let o=!1;if("up"===n){for(let n=0;n<r;n++){if(e-n<0||"object"==typeof this.board[e-n][t])return o;if(e+1<this.size&&"object"==typeof this.board[e+1][t])return o;if(e-r>0&&"object"==typeof this.board[e-r][t])return o;if(t-1>0&&"object"==typeof this.board[e-n][t-1])return o;if(t+1<this.size&&"object"==typeof this.board[e-n][t+1])return o}return o=!0,o}if("right"===n){for(let n=0;n<r;n++){if(t+n>=this.size||"object"==typeof this.board[e][t+n])return o;if(t-1>0&&"object"==typeof this.board[e][t-1])return o;if(t+r<this.size&&"object"==typeof this.board[e][t+r])return o;if(e-1>0&&"object"==typeof this.board[e-1][t+n])return o;if(e+1<this.size&&"object"==typeof this.board[e+1][t+n])return o}return o=!0,o}}placeShip(e,r,n,o){let a=new t(n);if("up"===o)for(let t=e;t>e-n;t--)this.board[t][r]=a;else if("right"===o)for(let t=r;t<r+n;t++)this.board[e][t]=a;return this.fleet.push(a),a}receiveAttack(e,t){return"object"==typeof this.board[e][t]?(this.board[e][t].hit(),this.board[e][t]):this.board[e][t]="hit"}allSunk(){for(let e of this.fleet)if(!1===e.sunk)return!1;return!0}}class o{constructor(e,t){this.name=e,this.board=t,this.shots=[]}boardInit(e){this.board.createBoard();for(let t of e)this.board.makeCoordinates(t);return console.log(this.board.fleet),this.board.fleet}makeShot(t=void 0,r=void 0){let n,o;if("Computer"!==this.name)return n=t,o=r,[n,o];let a=!1;for(;!a;)if("Computer"===this.name&&(n=Math.floor(Math.random()*this.board.size),o=Math.floor(Math.random()*this.board.size),console.log(!0!==e(this.shots,[n,o])),!0!==e(this.shots,[n,o])))return this.shots.push([n,o]),a=!0,console.log(this.shots),[n,o]}}const a=new o("Tony",new n(10));a.boardInit([4,3,3,2,2,2,1,1,1,1]);const i=new o("Computer",new n(10));function s(e,t){if(!0!==a.board.allSunk()&&!0!==i.board.allSunk()){let r=i.board.receiveAttack(e,t);d(e,t,r,i);let n=i.makeShot();a.board.receiveAttack(n[0],n[1]),d(n[0],n[1],r,a)}!0!==a.board.allSunk()?!0!==i.board.allSunk()||console.log("Player wins!"):console.log("Computer wins!")}function c(e){console.log(e);const t=document.createElement("div");t.classList.add("board");for(let r=0;r<e.board.size;r++)for(let n=0;n<e.board.size;n++){let o=document.createElement("div");o.classList.add("square"),o.id=`${r}${n}${e.name}`,o.dataset.id=`${r}${n}`,t.appendChild(o)}document.querySelector("#gameTable").appendChild(t)}function d(e,t,r,n){document.getElementById(`${e}${t}${n.name}`).style.background="hit"===r?"red":"orange"}i.boardInit([4,3,3,2,2,2,1,1,1,1]),console.log(a.board.board),console.log(i.board.board);var l=r(379),u=r.n(l),f=r(795),h=r.n(f),p=r(569),b=r.n(p),A=r(565),m=r.n(A),g=r(216),y=r.n(g),v=r(589),x=r.n(v),C=r(129),I={};I.styleTagTransform=x(),I.setAttributes=m(),I.insert=b().bind(null,"head"),I.domAPI=h(),I.insertStyleElement=y(),u()(C.Z,I),C.Z&&C.Z.locals&&C.Z.locals,c(a),c(i),function(e){for(let r=0;r<e.board.size;r++)for(let n=0;n<e.board.size;n++)if(e.board.board[r][n]instanceof t){let t=document.getElementById(`${r}${n}${e.name}`);4===e.board.board[r][n].length?t.style.background="yellow":3===e.board.board[r][n].length?t.style.background="green":2===e.board.board[r][n].length?t.style.background="blue":1===e.board.board[r][n].length&&(t.style.background="black")}}(a),function(){for(let e=0;e<i.board.size;e++)for(let t=0;t<i.board.size;t++)document.getElementById(`${e}${t}${i.name}`).addEventListener("click",(()=>{s(e,t)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,