(()=>{"use strict";var e={129:(e,r,n)=>{n.d(r,{Z:()=>p});var t=n(537),o=n.n(t),a=n(645),i=n.n(a),s=n(667),d=n.n(s),c=new URL(n(625),n.b),l=i()(o()),A=d()(c);l.push([e.id,"*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 60px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n    background-color: #f5f3ff;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1100px;\r\n    height: 700px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n#playerName{\r\n    font-size: 1.1rem;\r\n}\r\n\r\n#editIcon{\r\n    width: 15px;\r\n    height: auto;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( "+A+" ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n\r\n.playerWinsText{\r\n    font-weight: bold;\r\n    color: #4ade80;\r\n}\r\n\r\n.playerWinsTable{\r\n    box-shadow: 0 0 50px 15px #4ade80 !important;\r\n}\r\n\r\n.computerWinsText{\r\n    font-weight: bold;\r\n    color: #ef4444;\r\n}\r\n\r\n.computerWinsTable{\r\n    box-shadow: 0 0 50px 15px #ef4444 !important;\r\n}","",{version:3,sources:["webpack://./assets/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;IACd,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;IACT,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,yBAAyB;IACzB,mBAAmB;IACnB,yBAAyB;IACzB,+FAA+F;AACnG;;AAEA;IACI,aAAa;IACb,WAAW;IACX,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,yFAAyF;AAC7F;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sEAAoD;IACpD,qCAAqC;AACzC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,yFAAyF;AAC7F;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,4CAA4C;AAChD",sourcesContent:["*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 60px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #404040;\r\n    background-color: #f5f3ff;\r\n}\r\n\r\nh2{\r\n    font-size: 3rem;\r\n}\r\n\r\n#status{\r\n    font-size: 2rem;\r\n}\r\n\r\n#gameTable{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 50px;\r\n    align-items: center;\r\n    width: 1100px;\r\n    height: 700px;\r\n    border: 1px solid #a3a3a3;\r\n    border-radius: 20px;\r\n    background-color: #e2e8f0;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n}\r\n\r\n#boardsWrapper{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n#boardAndName{\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n#playerName{\r\n    font-size: 1.1rem;\r\n}\r\n\r\n#editIcon{\r\n    width: 15px;\r\n    height: auto;\r\n}\r\n\r\n.board {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 322px;\r\n    height: 322px;\r\n    border: 1px solid #525252;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n.square {\r\n    width: 32px;\r\n    height: 32px;\r\n    border: 1px solid #525252;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.square.hit {\r\n    background-image: url( './onTarget.svg' ) !important;\r\n    background-size: 29px 29px !important;\r\n}\r\n\r\ndiv .square:hover {\r\n    background-color: #f87171 !important;\r\n}\r\n\r\n#sideBar {\r\n    display: flex;\r\n    gap: 5px;\r\n}\r\n\r\n.sideShip {\r\n    display: flex;\r\n    border: 1px solid #404040;\r\n}\r\n\r\n.shipCell{\r\n    width: 12px;\r\n    height: 12px;\r\n}\r\n\r\n#restart{\r\n    width: 150px;\r\n    height: 45px;\r\n    border: 0px;\r\n    background-color: #38bdf8;\r\n    border-radius: 10px;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n}\r\n\r\n#restart:hover{\r\n    background-color: #0ea5e9;\r\n    cursor: pointer;\r\n}\r\n\r\n.playerWinsText{\r\n    font-weight: bold;\r\n    color: #4ade80;\r\n}\r\n\r\n.playerWinsTable{\r\n    box-shadow: 0 0 50px 15px #4ade80 !important;\r\n}\r\n\r\n.computerWinsText{\r\n    font-weight: bold;\r\n    color: #ef4444;\r\n}\r\n\r\n.computerWinsTable{\r\n    box-shadow: 0 0 50px 15px #ef4444 !important;\r\n}"],sourceRoot:""}]);const p=l},645:e=>{e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var n="",t=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),t&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=e(r),t&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(e,n,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);t&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),r.push(l))}},r}},667:e=>{e.exports=function(e,r){return r||(r={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),r.hash&&(e+=r.hash),/["'() \t\n]|(%20)/.test(e)||r.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var r=e[1],n=e[3];if(!n)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[r].concat([a]).join("\n")}return[r].join("\n")}},379:e=>{var r=[];function n(e){for(var n=-1,t=0;t<r.length;t++)if(r[t].identifier===e){n=t;break}return n}function t(e,t){for(var a={},i=[],s=0;s<e.length;s++){var d=e[s],c=t.base?d[0]+t.base:d[0],l=a[c]||0,A="".concat(c," ").concat(l);a[c]=l+1;var p=n(A),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)r[p].references++,r[p].updater(u);else{var f=o(u,t);t.byIndex=s,r.splice(s,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function o(e,r){var n=r.domAPI(r);return n.update(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;n.update(e=r)}else n.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);r[s].references--}for(var d=t(e,o),c=0;c<a.length;c++){var l=n(a[c]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}a=d}}},569:e=>{var r={};e.exports=function(e,n){var t=function(e){if(void 0===r[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}r[e]=n}return r[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:e=>{e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,n)=>{e.exports=function(e){var r=n.nc;r&&e.setAttribute("nonce",r)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var r=e.insertStyleElement(e);return{update:function(n){!function(e,r,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,o&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,e,r.options)}(r,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}},625:(e,r,n)=>{e.exports=n.p+"102caf9dc0f7886f0c20.svg"}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return e[t](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return n.d(r,{a:r}),r},n.d=(e,r)=>{for(var t in r)n.o(r,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var r=n.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&!e;)e=t[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0;var t={};(()=>{function e(e,r){let n=JSON.stringify(r);return e.some((e=>JSON.stringify(e)===n))}function r(e,r,n,t){let a=!1,i=[[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1]],s=[];for(let o=0;o<n;o++)if("up"===t&&e-o>=0){let n=[e-o,r];s.push(n)}else{if(!("right"===t&&r+o<this.size))return a;{let n=[e,r+o];s.push(n)}}for(let e of s){let[r,n]=e;if(this.board[r][n]instanceof o)return a;for(let e of i){let[t,i]=e;if(r+t>=0&&n+i>=0&&r+t<this.size&&n+i<this.size&&this.board[r+t][n+i]instanceof o)return a}}return a=!0,a}n.d(t,{X:()=>T});class o{constructor(e){this.length=e,this.timesHit=0,this.sunk=!1,this.coords=[]}hit(){this.timesHit+=1,this.isSunk()}isSunk(){this.length===this.timesHit&&(this.sunk=!0)}}class a{constructor(e){this.size=e,this.board=[],this.fleet=[]}createBoard(){for(let e=0;e<this.size;e++){let r=[];this.board.push(r);for(let r=0;r<this.size;r++)this.board[e][r]=""}return this.board}makeCoordinates(e){let n=!1;for(;!n;){const t=["up","right"],o=Math.floor(Math.random()*this.size),a=Math.floor(Math.random()*this.size),i=t[Math.floor(Math.random()*t.length)];if(n=r.call(this,o,a,e,i),n)return this.placeShip(o,a,e,i),[o,a,e,i]}}placeShip(e,r,n,t){let a=new o(n);if("up"===t)for(let t=e;t>e-n;t--)this.board[t][r]=a,a.coords.push([t,r]);else if("right"===t)for(let t=r;t<r+n;t++)this.board[e][t]=a,a.coords.push([e,t]);return this.fleet.push(a),a}receiveAttack(e,r){return this.board[e][r]instanceof o?(this.board[e][r].hit(),this.board[e][r]):this.board[e][r]="miss"}allSunk(){for(let e of this.fleet)if(!1===e.sunk)return!1;return!0}}class i{constructor(e,r,n){this.id=e,this.name=r,this.board=n,this.shots=[],this.q=[]}boardInit(e){this.board.createBoard();for(let r of e)this.board.makeCoordinates(r);return this.board.fleet}makeShot(r=void 0,n=void 0){let t=!1;if(0!==this.q.length)for(;!t;){let[r,n]=this.q[0];if(this.q.shift(),!0!==e(this.shots,[r,n]))return this.shots.push([r,n]),t=!0,[r,n]}for(;!t;)if(r=Math.floor(Math.random()*this.board.size),n=Math.floor(Math.random()*this.board.size),!0!==e(this.shots,[r,n]))return this.shots.push([r,n]),t=!0,[r,n]}}let[s,d]=function(){let e=new i(1,"Player",new a(10));e.boardInit([4,3,3,2,2,2,1,1,1,1]);let r=new i(2,"Computer",new a(10));return r.boardInit([4,3,3,2,2,2,1,1,1,1]),[e,r]}();const c=n.p+"3807743992cd04679273.svg";function l(e){const r=document.createElement("div");r.classList.add("board");for(let n=0;n<e.board.size;n++)for(let t=0;t<e.board.size;t++){let o=document.createElement("div");o.classList.add("square"),o.id=`${n}${t}${e.id}`,o.style.background="white",r.appendChild(o)}!function(e,r){const n=document.createElement("p");n.id=`${e.name}Name`,n.textContent=e.name;const t=document.createElement("div");t.id="boardAndName";const o=function(e){const r=document.createElement("div");r.id="sideBar";for(let n=0;n<e.board.fleet.length;n++){let t=document.createElement("div");t.classList.add("sideShip"),t.id=`${n}${e.id}`,r.appendChild(t);for(let r=0;r<e.board.fleet[n].length;r++){let e=document.createElement("div");e.classList.add("shipCell"),t.appendChild(e)}}return r}(e),a=document.querySelector("#boardsWrapper");t.appendChild(n),t.appendChild(r),t.appendChild(o),a.appendChild(t);const i=function(e){const r=document.querySelector("#boardAndName"),n=document.createElement("img");return n.src=c,n.id="editIcon",n.addEventListener("click",(()=>{let n=function(e){const r=document.createElement("input");return r.id=`${e.name}Input`,r.type="text",r.placeholder="your nickname",r.required=!0,r}(e),t=function(){const e=document.createElement("button");return e.classList.add("projectFormButtons"),e.innerText="Add",e}(),o=function(e){const r=document.createElement("form");return r.id="projectForm",r.addEventListener("submit",(n=>{let t=document.querySelector(`#${e.name}Input`),o=document.querySelector(`#${e.name}Name`);e.name=t.value,o.textContent=e.name,r.remove(),n.preventDefault()})),r}(e),a=function(e){const r=document.createElement("button");return r.classList.add("projectFormButtons"),r.innerText="Cancel",r.addEventListener("click",(r=>{r.preventDefault(),e.remove()})),r}(o);o.appendChild(n),o.appendChild(t),o.appendChild(a),r.appendChild(o)})),n}(e);t.appendChild(i)}(e,r)}function A(e){for(let r of e.board.fleet)for(let n of r.coords){let[t,o]=n,a=document.getElementById(`${t}${o}${e.id}`);4===r.length?a.style.background="#86efac":3===r.length?a.style.background="#67e8f9":2===r.length?a.style.background="#d8b4fe":1===r.length&&(a.style.background="#f9a8d4")}}function p(e,r,n,t){console.log(t.name);let o=document.getElementById(`${e}${r}${t.id}`);"miss"===n?o.textContent="•":o.classList.add("hit")}function u(e){let r=e.board.fleet;for(let n=0;n<r.length;n++)!0===r[n].sunk&&(document.getElementById(`${n}${e.id}`).style.background="#ef4444")}function f(e){let r=document.querySelector("#status"),n=document.querySelector("#gameTable");"Computer"!==e.name?(r.classList.add("playerWinsText"),n.classList.add("playerWinsTable"),r.textContent=`${e.name} wins!`):(r.textContent=`${e.name} wins!`,r.classList.add("computerWinsText"),n.classList.add("computerWinsTable"))}function h(r,n){if(document.querySelector("#status").textContent="Game is in progress",!0!==e(s.shots,[r,n])&&!0!==s.board.allSunk()&&!0!==d.board.allSunk()&&(function(e,r){let n=d.board.receiveAttack(e,r);s.shots.push([e,r]),p(e,r,n,d),u(d)}(r,n),function(e){for(let r of e.board.fleet)if(!0===r.sunk)for(let n of r.coords){let[t,o]=n,a=document.getElementById(`${t}${o}${e.id}`);4===r.length?a.style.background="#86efac":3===r.length?a.style.background="#67e8f9":2===r.length?a.style.background="#d8b4fe":1===r.length&&(a.style.background="#f9a8d4")}}(d),function(){let r=d.makeShot(),n=s.board.receiveAttack(r[0],r[1]);p(r[0],r[1],n,s),u(s),function(r,n,t,a){let i=[[-1,0],[0,1],[1,0],[0,-1]];if(n instanceof o&&!0!==n.sunk)for(let e of i){let[n,o]=e,i=[t+n,a+o];t+n>=0&&a+o>=0&&t+n<r.board.size&&a+o<r.board.size&&r.q.push(i)}else!0===n.sunk&&(function(r,n){let t=[[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1]];for(let o of r.coords){let[r,a]=o;for(let o of t){let[t,i]=o;if(r+t>=0&&a+i>=0&&r+t<n.board.size&&a+i<n.board.size&&!0!==e(n.shots,[r+t,a+i])){let e=[r+t,a+i];n.shots.push(e)}}}}(n,r),r.q=[])}(d,n,r[0],r[1])}()),!0!==d.board.allSunk())return!0===s.board.allSunk()?(A(d),void f(d)):void 0;f(s)}var m=n(379),b=n.n(m),x=n(795),C=n.n(x),g=n(569),y=n.n(g),I=n(565),v=n.n(I),B=n(216),w=n.n(B),k=n(589),E=n.n(k),S=n(129),z={};function T(){document.querySelector("#status").textContent="Let's Play! Hit the enemy board!",l(s),l(d),A(s),function(){for(let e=0;e<d.board.size;e++)for(let r=0;r<d.board.size;r++)document.getElementById(`${e}${r}${d.id}`).addEventListener("click",(()=>{h(e,r)}))}()}z.styleTagTransform=E(),z.setAttributes=v(),z.insert=y().bind(null,"head"),z.domAPI=C(),z.insertStyleElement=w(),b()(S.Z,z),S.Z&&S.Z.locals&&S.Z.locals,T(),document.querySelector("#restart").addEventListener("click",(()=>{!function(){s=new i(1,`${s.name}`,new a(10)),s.boardInit([4,3,3,2,2,2,1,1,1,1]),d=new i(2,`${d.name}`,new a(10)),d.boardInit([4,3,3,2,2,2,1,1,1,1]);let e=document.querySelector("#status"),r=document.querySelector("#gameTable");e.classList.remove(e.classList.item(0)),r.classList.remove(r.classList.item(0));let n=document.querySelectorAll("#boardsWrapper");for(let e of n)for(;e.firstChild;)e.removeChild(e.firstChild);T()}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUhBSUlBLEVBQWdDLElBQUlDLElBQUksWUFDeENDLEVBQTBCLElBQTRCLEtBQ3REQyxFQUFxQyxJQUFnQ0gsR0FFekVFLEVBQXdCRSxLQUFLLENBQUNDLEVBQU9DLEdBQUksc25EQUF3bkRILEVBQXFDLHdqQ0FBeWpDLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLGdDQUFnQyxNQUFRLEdBQUcsU0FBVyw2akNBQTZqQyxlQUFpQixDQUFDLDRyRkFBNHJGLFdBQWEsTUFFeG1OLFMsVUNKQUUsRUFBT0UsUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBNEVYLE9BekVBQSxFQUFLQyxTQUFXLFdBQ2QsT0FBT0MsS0FBS0MsS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVLEdBQ1ZDLE9BQStCLElBQVpGLEVBQUssR0FvQjVCLE9BbkJJQSxFQUFLLEtBQ1BDLEdBQVcsY0FBY0UsT0FBT0gsRUFBSyxHQUFJLFFBRXZDQSxFQUFLLEtBQ1BDLEdBQVcsVUFBVUUsT0FBT0gsRUFBSyxHQUFJLE9BRW5DRSxJQUNGRCxHQUFXLFNBQVNFLE9BQU9ILEVBQUssR0FBR0ksT0FBUyxFQUFJLElBQUlELE9BQU9ILEVBQUssSUFBTSxHQUFJLE9BRTVFQyxHQUFXTixFQUF1QkssR0FDOUJFLElBQ0ZELEdBQVcsS0FFVEQsRUFBSyxLQUNQQyxHQUFXLEtBRVRELEVBQUssS0FDUEMsR0FBVyxLQUVOQSxDQUNULElBQUdJLEtBQUssR0FDVixFQUdBVCxFQUFLVSxFQUFJLFNBQVdDLEVBQVNDLEVBQU9DLEVBQVFDLEVBQVVDLEdBQzdCLGlCQUFaSixJQUNUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxPQUFTSyxLQUU3QixJQUFJQyxFQUF5QixDQUFDLEVBQzlCLEdBQUlKLEVBQ0YsSUFBSyxJQUFJSyxFQUFJLEVBQUdBLEVBQUloQixLQUFLTSxPQUFRVSxJQUFLLENBQ3BDLElBQUlyQixFQUFLSyxLQUFLZ0IsR0FBRyxHQUNQLE1BQU5yQixJQUNGb0IsRUFBdUJwQixJQUFNLEVBRWpDLENBRUYsSUFBSyxJQUFJc0IsRUFBSyxFQUFHQSxFQUFLUixFQUFRSCxPQUFRVyxJQUFNLENBQzFDLElBQUlmLEVBQU8sR0FBR0csT0FBT0ksRUFBUVEsSUFDekJOLEdBQVVJLEVBQXVCYixFQUFLLFdBR3JCLElBQVZXLFNBQ2MsSUFBWlgsRUFBSyxLQUdkQSxFQUFLLEdBQUssU0FBU0csT0FBT0gsRUFBSyxHQUFHSSxPQUFTLEVBQUksSUFBSUQsT0FBT0gsRUFBSyxJQUFNLEdBQUksTUFBTUcsT0FBT0gsRUFBSyxHQUFJLE1BRi9GQSxFQUFLLEdBQUtXLEdBTVZILElBQ0dSLEVBQUssSUFHUkEsRUFBSyxHQUFLLFVBQVVHLE9BQU9ILEVBQUssR0FBSSxNQUFNRyxPQUFPSCxFQUFLLEdBQUksS0FDMURBLEVBQUssR0FBS1EsR0FIVlIsRUFBSyxHQUFLUSxHQU1WRSxJQUNHVixFQUFLLElBR1JBLEVBQUssR0FBSyxjQUFjRyxPQUFPSCxFQUFLLEdBQUksT0FBT0csT0FBT0gsRUFBSyxHQUFJLEtBQy9EQSxFQUFLLEdBQUtVLEdBSFZWLEVBQUssR0FBSyxHQUFHRyxPQUFPTyxJQU14QmQsRUFBS0wsS0FBS1MsR0FDWixDQUNGLEVBQ09KLENBQ1QsQyxVQ2xGQUosRUFBT0UsUUFBVSxTQUFVc0IsRUFBS0MsR0FJOUIsT0FIS0EsSUFDSEEsRUFBVSxDQUFDLEdBRVJELEdBR0xBLEVBQU1FLE9BQU9GLEVBQUlHLFdBQWFILEVBQUlJLFFBQVVKLEdBR3hDLGVBQWVLLEtBQUtMLEtBQ3RCQSxFQUFNQSxFQUFJTSxNQUFNLEdBQUksSUFFbEJMLEVBQVFNLE9BQ1ZQLEdBQU9DLEVBQVFNLE1BS2Isb0JBQW9CRixLQUFLTCxJQUFRQyxFQUFRTyxXQUNwQyxJQUFLckIsT0FBT2EsRUFBSVMsUUFBUSxLQUFNLE9BQU9BLFFBQVEsTUFBTyxPQUFRLEtBRTlEVCxHQWpCRUEsQ0FrQlgsQyxVQ3ZCQXhCLEVBQU9FLFFBQVUsU0FBVU0sR0FDekIsSUFBSUMsRUFBVUQsRUFBSyxHQUNmMEIsRUFBYTFCLEVBQUssR0FDdEIsSUFBSzBCLEVBQ0gsT0FBT3pCLEVBRVQsR0FBb0IsbUJBQVQwQixLQUFxQixDQUM5QixJQUFJQyxFQUFTRCxLQUFLRSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVOLE1BQ3pETyxFQUFPLCtEQUErRDlCLE9BQU95QixHQUM3RU0sRUFBZ0IsT0FBTy9CLE9BQU84QixFQUFNLE9BQ3hDLE1BQU8sQ0FBQ2hDLEdBQVNFLE9BQU8sQ0FBQytCLElBQWdCN0IsS0FBSyxLQUNoRCxDQUNBLE1BQU8sQ0FBQ0osR0FBU0ksS0FBSyxLQUN4QixDLFVDYkEsSUFBSThCLEVBQWMsR0FDbEIsU0FBU0MsRUFBcUJDLEdBRTVCLElBREEsSUFBSUMsR0FBVSxFQUNMaEMsRUFBSSxFQUFHQSxFQUFJNkIsRUFBWS9CLE9BQVFFLElBQ3RDLEdBQUk2QixFQUFZN0IsR0FBRytCLGFBQWVBLEVBQVksQ0FDNUNDLEVBQVNoQyxFQUNULEtBQ0YsQ0FFRixPQUFPZ0MsQ0FDVCxDQUNBLFNBQVNDLEVBQWEzQyxFQUFNcUIsR0FHMUIsSUFGQSxJQUFJdUIsRUFBYSxDQUFDLEVBQ2RDLEVBQWMsR0FDVG5DLEVBQUksRUFBR0EsRUFBSVYsRUFBS1EsT0FBUUUsSUFBSyxDQUNwQyxJQUFJTixFQUFPSixFQUFLVSxHQUNaYixFQUFLd0IsRUFBUXlCLEtBQU8xQyxFQUFLLEdBQUtpQixFQUFReUIsS0FBTzFDLEVBQUssR0FDbEQyQyxFQUFRSCxFQUFXL0MsSUFBTyxFQUMxQjRDLEVBQWEsR0FBR2xDLE9BQU9WLEVBQUksS0FBS1UsT0FBT3dDLEdBQzNDSCxFQUFXL0MsR0FBTWtELEVBQVEsRUFDekIsSUFBSUMsRUFBb0JSLEVBQXFCQyxHQUN6Q1EsRUFBTSxDQUNSQyxJQUFLOUMsRUFBSyxHQUNWUSxNQUFPUixFQUFLLEdBQ1orQyxVQUFXL0MsRUFBSyxHQUNoQlUsU0FBVVYsRUFBSyxHQUNmVyxNQUFPWCxFQUFLLElBRWQsSUFBMkIsSUFBdkI0QyxFQUNGVCxFQUFZUyxHQUFtQkksYUFDL0JiLEVBQVlTLEdBQW1CSyxRQUFRSixPQUNsQyxDQUNMLElBQUlJLEVBQVVDLEVBQWdCTCxFQUFLNUIsR0FDbkNBLEVBQVFrQyxRQUFVN0MsRUFDbEI2QixFQUFZaUIsT0FBTzlDLEVBQUcsRUFBRyxDQUN2QitCLFdBQVlBLEVBQ1pZLFFBQVNBLEVBQ1RELFdBQVksR0FFaEIsQ0FDQVAsRUFBWWxELEtBQUs4QyxFQUNuQixDQUNBLE9BQU9JLENBQ1QsQ0FDQSxTQUFTUyxFQUFnQkwsRUFBSzVCLEdBQzVCLElBQUlvQyxFQUFNcEMsRUFBUXFDLE9BQU9yQyxHQVl6QixPQVhBb0MsRUFBSUUsT0FBT1YsR0FDRyxTQUFpQlcsR0FDN0IsR0FBSUEsRUFBUSxDQUNWLEdBQUlBLEVBQU9WLE1BQVFELEVBQUlDLEtBQU9VLEVBQU9oRCxRQUFVcUMsRUFBSXJDLE9BQVNnRCxFQUFPVCxZQUFjRixFQUFJRSxXQUFhUyxFQUFPOUMsV0FBYW1DLEVBQUluQyxVQUFZOEMsRUFBTzdDLFFBQVVrQyxFQUFJbEMsTUFDekosT0FFRjBDLEVBQUlFLE9BQU9WLEVBQU1XLEVBQ25CLE1BQ0VILEVBQUlJLFFBRVIsQ0FFRixDQUNBakUsRUFBT0UsUUFBVSxTQUFVRSxFQUFNcUIsR0FHL0IsSUFBSXlDLEVBQWtCbkIsRUFEdEIzQyxFQUFPQSxHQUFRLEdBRGZxQixFQUFVQSxHQUFXLENBQUMsR0FHdEIsT0FBTyxTQUFnQjBDLEdBQ3JCQSxFQUFVQSxHQUFXLEdBQ3JCLElBQUssSUFBSXJELEVBQUksRUFBR0EsRUFBSW9ELEVBQWdCdEQsT0FBUUUsSUFBSyxDQUMvQyxJQUNJc0QsRUFBUXhCLEVBREtzQixFQUFnQnBELElBRWpDNkIsRUFBWXlCLEdBQU9aLFlBQ3JCLENBRUEsSUFEQSxJQUFJYSxFQUFxQnRCLEVBQWFvQixFQUFTMUMsR0FDdEM2QyxFQUFLLEVBQUdBLEVBQUtKLEVBQWdCdEQsT0FBUTBELElBQU0sQ0FDbEQsSUFDSUMsRUFBUzNCLEVBREtzQixFQUFnQkksSUFFSyxJQUFuQzNCLEVBQVk0QixHQUFRZixhQUN0QmIsRUFBWTRCLEdBQVFkLFVBQ3BCZCxFQUFZaUIsT0FBT1csRUFBUSxHQUUvQixDQUNBTCxFQUFrQkcsQ0FDcEIsQ0FDRixDLFVDakZBLElBQUlHLEVBQU8sQ0FBQyxFQStCWnhFLEVBQU9FLFFBUFAsU0FBMEJ1RSxFQUFRQyxHQUNoQyxJQUFJQyxFQXRCTixTQUFtQkEsR0FDakIsUUFBNEIsSUFBakJILEVBQUtHLEdBQXlCLENBQ3ZDLElBQUlDLEVBQWNDLFNBQVNDLGNBQWNILEdBR3pDLEdBQUlJLE9BQU9DLG1CQUFxQkosYUFBdUJHLE9BQU9DLGtCQUM1RCxJQUdFSixFQUFjQSxFQUFZSyxnQkFBZ0JDLElBQzVDLENBQUUsTUFBT0MsR0FFUFAsRUFBYyxJQUNoQixDQUVGSixFQUFLRyxHQUFVQyxDQUNqQixDQUNBLE9BQU9KLEVBQUtHLEVBQ2QsQ0FJZVMsQ0FBVVgsR0FDdkIsSUFBS0UsRUFDSCxNQUFNLElBQUlVLE1BQU0sMkdBRWxCVixFQUFPVyxZQUFZWixFQUNyQixDLFVDdkJBMUUsRUFBT0UsUUFOUCxTQUE0QnVCLEdBQzFCLElBQUk4RCxFQUFVVixTQUFTVyxjQUFjLFNBR3JDLE9BRkEvRCxFQUFRZ0UsY0FBY0YsRUFBUzlELEVBQVFpRSxZQUN2Q2pFLEVBQVFnRCxPQUFPYyxFQUFTOUQsRUFBUUEsU0FDekI4RCxDQUNULEMsZ0JDQ0F2RixFQUFPRSxRQU5QLFNBQXdDeUYsR0FDdEMsSUFBSUMsRUFBbUQsS0FDbkRBLEdBQ0ZELEVBQWFFLGFBQWEsUUFBU0QsRUFFdkMsQyxVQ29EQTVGLEVBQU9FLFFBakJQLFNBQWdCdUIsR0FDZCxHQUF3QixvQkFBYm9ELFNBQ1QsTUFBTyxDQUNMZCxPQUFRLFdBQW1CLEVBQzNCRSxPQUFRLFdBQW1CLEdBRy9CLElBQUkwQixFQUFlbEUsRUFBUXFFLG1CQUFtQnJFLEdBQzlDLE1BQU8sQ0FDTHNDLE9BQVEsU0FBZ0JWLElBakQ1QixTQUFlc0MsRUFBY2xFLEVBQVM0QixHQUNwQyxJQUFJQyxFQUFNLEdBQ05ELEVBQUluQyxXQUNOb0MsR0FBTyxjQUFjM0MsT0FBTzBDLEVBQUluQyxTQUFVLFFBRXhDbUMsRUFBSXJDLFFBQ05zQyxHQUFPLFVBQVUzQyxPQUFPMEMsRUFBSXJDLE1BQU8sT0FFckMsSUFBSU4sT0FBaUMsSUFBZDJDLEVBQUlsQyxNQUN2QlQsSUFDRjRDLEdBQU8sU0FBUzNDLE9BQU8wQyxFQUFJbEMsTUFBTVAsT0FBUyxFQUFJLElBQUlELE9BQU8wQyxFQUFJbEMsT0FBUyxHQUFJLE9BRTVFbUMsR0FBT0QsRUFBSUMsSUFDUDVDLElBQ0Y0QyxHQUFPLEtBRUxELEVBQUlyQyxRQUNOc0MsR0FBTyxLQUVMRCxFQUFJbkMsV0FDTm9DLEdBQU8sS0FFVCxJQUFJQyxFQUFZRixFQUFJRSxVQUNoQkEsR0FBNkIsb0JBQVRwQixPQUN0Qm1CLEdBQU8sdURBQXVEM0MsT0FBT3dCLEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVWUsTUFBZSxRQUt0STlCLEVBQVFzRSxrQkFBa0J6QyxFQUFLcUMsRUFBY2xFLEVBQVFBLFFBQ3ZELENBb0JNdUUsQ0FBTUwsRUFBY2xFLEVBQVM0QixFQUMvQixFQUNBWSxPQUFRLFlBckJaLFNBQTRCMEIsR0FFMUIsR0FBZ0MsT0FBNUJBLEVBQWFNLFdBQ2YsT0FBTyxFQUVUTixFQUFhTSxXQUFXQyxZQUFZUCxFQUN0QyxDQWdCTVEsQ0FBbUJSLEVBQ3JCLEVBRUosQyxVQzlDQTNGLEVBQU9FLFFBVlAsU0FBMkJvRCxFQUFLcUMsR0FDOUIsR0FBSUEsRUFBYVMsV0FDZlQsRUFBYVMsV0FBV0MsUUFBVS9DLE1BQzdCLENBQ0wsS0FBT3FDLEVBQWFXLFlBQ2xCWCxFQUFhTyxZQUFZUCxFQUFhVyxZQUV4Q1gsRUFBYUwsWUFBWVQsU0FBUzBCLGVBQWVqRCxHQUNuRCxDQUNGLEMsMkRDWElrRCxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJ0RixJQUFqQnVGLEVBQ0gsT0FBT0EsRUFBYXpHLFFBR3JCLElBQUlGLEVBQVN3RyxFQUF5QkUsR0FBWSxDQUNqRHpHLEdBQUl5RyxFQUVKeEcsUUFBUyxDQUFDLEdBT1gsT0FIQTBHLEVBQW9CRixHQUFVMUcsRUFBUUEsRUFBT0UsUUFBU3VHLEdBRy9DekcsRUFBT0UsT0FDZixDQUdBdUcsRUFBb0JJLEVBQUlELEVDeEJ4QkgsRUFBb0JLLEVBQUs5RyxJQUN4QixJQUFJK0csRUFBUy9HLEdBQVVBLEVBQU8yQixXQUM3QixJQUFPM0IsRUFBaUIsUUFDeEIsSUFBTSxFQUVQLE9BREF5RyxFQUFvQk8sRUFBRUQsRUFBUSxDQUFFRSxFQUFHRixJQUM1QkEsQ0FBTSxFQ0xkTixFQUFvQk8sRUFBSSxDQUFDOUcsRUFBU2dILEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWFQsRUFBb0JXLEVBQUVGLEVBQVlDLEtBQVNWLEVBQW9CVyxFQUFFbEgsRUFBU2lILElBQzVFRSxPQUFPQyxlQUFlcEgsRUFBU2lILEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxJQUUxRSxFQ05EVixFQUFvQmdCLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZDLFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT3BILE1BQVEsSUFBSXFILFNBQVMsY0FBYixFQUNoQixDQUFFLE1BQU94QyxHQUNSLEdBQXNCLGlCQUFYSixPQUFxQixPQUFPQSxNQUN4QyxDQUNBLENBUHVCLEdDQXhCMEIsRUFBb0JXLEVBQUksQ0FBQy9ELEVBQUt1RSxJQUFVUCxPQUFPUSxVQUFVQyxlQUFlQyxLQUFLMUUsRUFBS3VFLEcsTUNBbEYsSUFBSUksRUFDQXZCLEVBQW9CZ0IsRUFBRVEsZ0JBQWVELEVBQVl2QixFQUFvQmdCLEVBQUVTLFNBQVcsSUFDdEYsSUFBSXJELEVBQVc0QixFQUFvQmdCLEVBQUU1QyxTQUNyQyxJQUFLbUQsR0FBYW5ELElBQ2JBLEVBQVNzRCxnQkFDWkgsRUFBWW5ELEVBQVNzRCxjQUFjQyxNQUMvQkosR0FBVyxDQUNmLElBQUlLLEVBQVV4RCxFQUFTeUQscUJBQXFCLFVBQzVDLEdBQUdELEVBQVF6SCxPQUVWLElBREEsSUFBSUUsRUFBSXVILEVBQVF6SCxPQUFTLEVBQ2xCRSxHQUFLLElBQU1rSCxHQUFXQSxFQUFZSyxFQUFRdkgsS0FBS3NILEdBRXhELENBSUQsSUFBS0osRUFBVyxNQUFNLElBQUkzQyxNQUFNLHlEQUNoQzJDLEVBQVlBLEVBQVUvRixRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRndFLEVBQW9COEIsRUFBSVAsQyxLQ2xCeEJ2QixFQUFvQitCLEVBQUkzRCxTQUFTNEQsU0FBV0MsS0FBS1IsU0FBU1MsS0NBMURsQyxFQUFvQm1DLFFBQUt4SCxFLGVDRXpCLFNBQVN5SCxFQUFhQyxFQUFPdEksR0FDekIsSUFBSXVJLEVBQVV4RyxLQUFLQyxVQUFVaEMsR0FFN0IsT0FBT3NJLEVBQU1FLE1BREdDLEdBQU8xRyxLQUFLQyxVQUFVeUcsS0FBUUYsR0FFbEQsQ0F5RUEsU0FBU0csRUFBU0MsRUFBR0MsRUFBR0MsRUFBS0MsR0FDekIsSUFBSUMsR0FBUSxFQUNSQyxFQUFRLENBQUMsRUFBRSxFQUFHLEdBQUksRUFBRSxFQUFHLEdBQUksQ0FBQyxFQUFHLEdBQUksQ0FBQyxFQUFHLEdBQUksQ0FBQyxFQUFHLEdBQUksQ0FBQyxHQUFJLEdBQUksQ0FBQyxHQUFJLEdBQUksRUFBRSxHQUFJLElBQzNFQyxFQUFTLEdBQ2IsSUFBSyxJQUFJM0ksRUFBSSxFQUFHQSxFQUFJdUksRUFBS3ZJLElBQ3JCLEdBQWtCLE9BQWR3SSxHQUFzQkgsRUFBSXJJLEdBQUssRUFBRSxDQUNqQyxJQUFJNEksRUFBUSxDQUFDUCxFQUFJckksRUFBR3NJLEdBQ3BCSyxFQUFPMUosS0FBSzJKLEVBQ2hCLEtBQU0sTUFBa0IsVUFBZEosR0FBeUJGLEVBQUl0SSxFQUFJUixLQUFLcUosTUFJNUMsT0FBT0osRUFKMEMsQ0FDakQsSUFBSUcsRUFBUSxDQUFDUCxFQUFHQyxFQUFJdEksR0FDcEIySSxFQUFPMUosS0FBSzJKLEVBQ2hCLENBRUEsQ0FFSixJQUFLLElBQUlBLEtBQVNELEVBQU8sQ0FDckIsSUFBS04sRUFBR0MsR0FBS00sRUFDYixHQUFJcEosS0FBS3NKLE1BQU1ULEdBQUdDLGFBQWMsRUFDNUIsT0FBT0csRUFFWCxJQUFLLElBQUlNLEtBQVFMLEVBQU0sQ0FDbkIsSUFBS00sRUFBSUMsR0FBTUYsRUFDZixHQUFJVixFQUFJVyxHQUFNLEdBQUtWLEVBQUlXLEdBQU0sR0FBS1osRUFBSVcsRUFBS3hKLEtBQUtxSixNQUFRUCxFQUFJVyxFQUFLekosS0FBS3FKLE1BQ2xFckosS0FBS3NKLE1BQU1ULEVBQUlXLEdBQUlWLEVBQUlXLGFBQWUsRUFDbEMsT0FBT1IsQ0FFbkIsQ0FDSixDQUVBLE9BREFBLEdBQVEsRUFDREEsQ0FDWCxDLGlCQzNHQSxNQUFNLEVBQ0ZTLFlBQVlwSixHQUNSTixLQUFLTSxPQUFTQSxFQUNkTixLQUFLMkosU0FBVyxFQUNoQjNKLEtBQUs0SixNQUFPLEVBQ1o1SixLQUFLbUosT0FBUyxFQUNsQixDQUVBVSxNQUNJN0osS0FBSzJKLFVBQVksRUFDakIzSixLQUFLOEosUUFDVCxDQUVBQSxTQUNROUosS0FBS00sU0FBV04sS0FBSzJKLFdBQ3JCM0osS0FBSzRKLE1BQU8sRUFFcEIsRUFHSixNQUFNRyxFQUNGTCxZQUFZTCxHQUNSckosS0FBS3FKLEtBQU9BLEVBQ1pySixLQUFLc0osTUFBUSxHQUNidEosS0FBS2dLLE1BQVEsRUFDakIsQ0FFQUMsY0FDSSxJQUFLLElBQUl6SixFQUFJLEVBQUdBLEVBQUlSLEtBQUtxSixLQUFNN0ksSUFBSyxDQUNoQyxJQUFJMEosRUFBTSxHQUNWbEssS0FBS3NKLE1BQU03SixLQUFLeUssR0FDaEIsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUluSyxLQUFLcUosS0FBTWMsSUFDM0JuSyxLQUFLc0osTUFBTTlJLEdBQUcySixHQUFLLEVBRTNCLENBQ0EsT0FBT25LLEtBQUtzSixLQUNoQixDQUVBYyxnQkFBZ0JyQixHQUNaLElBQUlFLEdBQVEsRUFDWixNQUFPQSxHQUFNLENBQ1QsTUFBTUQsRUFBWSxDQUFDLEtBQU0sU0FDbkJILEVBQUl3QixLQUFLQyxNQUFNRCxLQUFLRSxTQUFXdkssS0FBS3FKLE1BQ3BDUCxFQUFJdUIsS0FBS0MsTUFBTUQsS0FBS0UsU0FBV3ZLLEtBQUtxSixNQUNwQ21CLEVBQWdCeEIsRUFBVXFCLEtBQUtDLE1BQU1ELEtBQUtFLFNBQVd2QixFQUFVMUksU0FFckUsR0FEQTJJLEVBQVFMLEVBQVNuQixLQUFLekgsS0FBTTZJLEVBQUdDLEVBQUdDLEVBQUt5QixHQUNuQ3ZCLEVBRUEsT0FEQWpKLEtBQUt5SyxVQUFVNUIsRUFBR0MsRUFBR0MsRUFBS3lCLEdBQ25CLENBQUMzQixFQUFHQyxFQUFHQyxFQUFLeUIsRUFFM0IsQ0FDSixDQUVBQyxVQUFVNUIsRUFBR0MsRUFBR0MsRUFBS0MsR0FDakIsSUFBSTBCLEVBQVUsSUFBSSxFQUFLM0IsR0FDdkIsR0FBa0IsT0FBZEMsRUFDQSxJQUFLLElBQUl4SSxFQUFJcUksRUFBR3JJLEVBQUlxSSxFQUFJRSxFQUFLdkksSUFDekJSLEtBQUtzSixNQUFNOUksR0FBR3NJLEdBQUs0QixFQUNuQkEsRUFBUXZCLE9BQU8xSixLQUFLLENBQUNlLEVBQUdzSSxTQUczQixHQUFrQixVQUFkRSxFQUNMLElBQUssSUFBSXhJLEVBQUlzSSxFQUFHdEksRUFBSXNJLEVBQUlDLEVBQUt2SSxJQUN6QlIsS0FBS3NKLE1BQU1ULEdBQUdySSxHQUFLa0ssRUFDbkJBLEVBQVF2QixPQUFPMUosS0FBSyxDQUFDb0osRUFBR3JJLElBSWhDLE9BREFSLEtBQUtnSyxNQUFNdkssS0FBS2lMLEdBQ1RBLENBQ1gsQ0FFQUMsY0FBYzlCLEVBQUdDLEdBQ2IsT0FBSTlJLEtBQUtzSixNQUFNVCxHQUFHQyxhQUFjLEdBQzVCOUksS0FBS3NKLE1BQU1ULEdBQUdDLEdBQUdlLE1BQ1Y3SixLQUFLc0osTUFBTVQsR0FBR0MsSUFFbEI5SSxLQUFLc0osTUFBTVQsR0FBR0MsR0FBSyxNQUM5QixDQUVBOEIsVUFDSSxJQUFLLElBQUlDLEtBQVE3SyxLQUFLZ0ssTUFDbEIsSUFBa0IsSUFBZGEsRUFBS2pCLEtBQ0wsT0FBTyxFQUdmLE9BQU8sQ0FDWCxFQUdKLE1BQU1rQixFQUNGcEIsWUFBWS9KLEVBQUlvTCxFQUFNekIsR0FDbEJ0SixLQUFLTCxHQUFLQSxFQUNWSyxLQUFLK0ssS0FBT0EsRUFDWi9LLEtBQUtzSixNQUFRQSxFQUNidEosS0FBS2dMLE1BQVEsR0FDYmhMLEtBQUtpTCxFQUFJLEVBQ2IsQ0FFQUMsVUFBVUMsR0FDTm5MLEtBQUtzSixNQUFNVyxjQUNYLElBQUssSUFBSW1CLEtBQVdELEVBQ2hCbkwsS0FBS3NKLE1BQU1jLGdCQUFnQmdCLEdBRS9CLE9BQU9wTCxLQUFLc0osTUFBTVUsS0FDdEIsQ0FFQXFCLFNBQVN4QyxPQUFJL0gsRUFBV2dJLE9BQUloSSxHQUN4QixJQUFJbUksR0FBUSxFQUNaLEdBQXNCLElBQWxCakosS0FBS2lMLEVBQUUzSyxPQUNQLE1BQVEySSxHQUFNLENBQ1YsSUFBS0osRUFBR0MsR0FBSzlJLEtBQUtpTCxFQUFFLEdBRXBCLEdBREFqTCxLQUFLaUwsRUFBRUssU0FDa0MsSUFBckMvQyxFQUFhdkksS0FBS2dMLE1BQU8sQ0FBQ25DLEVBQUdDLElBRzdCLE9BRkE5SSxLQUFLZ0wsTUFBTXZMLEtBQUssQ0FBQ29KLEVBQUdDLElBQ3BCRyxHQUFRLEVBQ0QsQ0FBQ0osRUFBR0MsRUFFbkIsQ0FFSixNQUFPRyxHQUdILEdBRkFKLEVBQUl3QixLQUFLQyxNQUFNRCxLQUFLRSxTQUFXdkssS0FBS3NKLE1BQU1ELE1BQzFDUCxFQUFJdUIsS0FBS0MsTUFBTUQsS0FBS0UsU0FBV3ZLLEtBQUtzSixNQUFNRCxPQUNELElBQXJDZCxFQUFhdkksS0FBS2dMLE1BQU8sQ0FBQ25DLEVBQUdDLElBRzdCLE9BRkE5SSxLQUFLZ0wsTUFBTXZMLEtBQUssQ0FBQ29KLEVBQUdDLElBQ3BCRyxHQUFRLEVBQ0QsQ0FBQ0osRUFBR0MsRUFHdkIsRUFXSixJQUFLeUMsRUFBUUMsR0FSYixXQUNJLElBQUlELEVBQVMsSUFBSVQsRUFBTyxFQUFHLFNBQVUsSUFBSWYsRUFBVSxLQUNuRHdCLEVBQU9MLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUNwQyxJQUFJTSxFQUFXLElBQUlWLEVBQU8sRUFBRyxXQUFZLElBQUlmLEVBQVUsS0FFdkQsT0FEQXlCLEVBQVNOLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUMvQixDQUFDSyxFQUFRQyxFQUNwQixDQUV5QkMsRyx1Q0MzSXpCLFNBQVNDLEVBQVlILEdBQ2pCLE1BQU1qQyxFQUFRL0UsU0FBU1csY0FBYyxPQUNyQ29FLEVBQU1xQyxVQUFVQyxJQUFJLFNBQ3BCLElBQUssSUFBSXBMLEVBQUksRUFBR0EsRUFBSStLLEVBQU9qQyxNQUFNRCxLQUFNN0ksSUFDbkMsSUFBSyxJQUFJMkosRUFBSSxFQUFHQSxFQUFJb0IsRUFBT2pDLE1BQU1ELEtBQU1jLElBQUssQ0FDeEMsSUFBSTBCLEVBQVN0SCxTQUFTVyxjQUFjLE9BQ3BDMkcsRUFBT0YsVUFBVUMsSUFBSSxVQUNyQkMsRUFBT2xNLEdBQUssR0FBR2EsSUFBSTJKLElBQUlvQixFQUFPNUwsS0FDOUJrTSxFQUFPekgsTUFBTTBILFdBQWEsUUFDMUJ4QyxFQUFNdEUsWUFBWTZHLEVBQ3RCLEVDUlIsU0FBNkJOLEVBQVFqQyxHQUNqQyxNQUFNeUMsRUFBYXhILFNBQVNXLGNBQWMsS0FDMUM2RyxFQUFXcE0sR0FBSyxHQUFHNEwsRUFBT1IsV0FDMUJnQixFQUFXQyxZQUFjVCxFQUFPUixLQUNoQyxNQUFNa0IsRUFBZTFILFNBQVNXLGNBQWMsT0FDNUMrRyxFQUFhdE0sR0FBSyxlQUNsQixNQUFNdU0sRUR1RFYsU0FBNEJYLEdBQ3hCLE1BQU12QixFQUFRekYsU0FBU1csY0FBYyxPQUNyQzhFLEVBQU1ySyxHQUFLLFVBQ1gsSUFBSyxJQUFJYSxFQUFJLEVBQUdBLEVBQUkrSyxFQUFPakMsTUFBTVUsTUFBTTFKLE9BQVFFLElBQUksQ0FDL0MsSUFBSTJMLEVBQVc1SCxTQUFTVyxjQUFjLE9BQ3RDaUgsRUFBU1IsVUFBVUMsSUFBSSxZQUN2Qk8sRUFBU3hNLEdBQUssR0FBR2EsSUFBSStLLEVBQU81TCxLQUM1QnFLLEVBQU1oRixZQUFZbUgsR0FDbEIsSUFBSyxJQUFJaEMsRUFBSSxFQUFHQSxFQUFJb0IsRUFBT2pDLE1BQU1VLE1BQU14SixHQUFHRixPQUFRNkosSUFBSyxDQUNuRCxJQUFJaUMsRUFBVzdILFNBQVNXLGNBQWMsT0FDdENrSCxFQUFTVCxVQUFVQyxJQUFJLFlBQ3ZCTyxFQUFTbkgsWUFBWW9ILEVBQ3pCLENBQ0osQ0FDQSxPQUFPcEMsQ0FDWCxDQ3RFc0JxQyxDQUFtQmQsR0FDL0JlLEVBQWdCL0gsU0FBU0MsY0FBYyxrQkFDN0N5SCxFQUFhakgsWUFBWStHLEdBQ3pCRSxFQUFhakgsWUFBWXNFLEdBQ3pCMkMsRUFBYWpILFlBQVlrSCxHQUN6QkksRUFBY3RILFlBQVlpSCxHQUMxQixNQUFNTSxFQUlWLFNBQXdCaEIsR0FDcEIsTUFBTVUsRUFBZTFILFNBQVNDLGNBQWMsaUJBQ3RDK0gsRUFBYWhJLFNBQVNXLGNBQWMsT0FhMUMsT0FaQXFILEVBQVd6RSxJQUFNLEVBQ2pCeUUsRUFBVzVNLEdBQUssV0FDaEI0TSxFQUFXQyxpQkFBaUIsU0FBUyxLQUNqQyxJQUFJQyxFQTBCWixTQUFrQmxCLEdBQ2QsTUFBTW1CLEVBQVluSSxTQUFTVyxjQUFjLFNBS3pDLE9BSkF3SCxFQUFVL00sR0FBSyxHQUFHNEwsRUFBT1IsWUFDekIyQixFQUFVQyxLQUFPLE9BQ2pCRCxFQUFVRSxZQUFjLGdCQUN4QkYsRUFBVUcsVUFBVyxFQUNkSCxDQUNYLENBakN3QkksQ0FBU3ZCLEdBQ3JCd0IsRUFrQ1osV0FDSSxNQUFNQSxFQUFTeEksU0FBU1csY0FBYyxVQUd0QyxPQUZBNkgsRUFBT3BCLFVBQVVDLElBQUksc0JBQ3JCbUIsRUFBT0MsVUFBWSxNQUNaRCxDQUNYLENBdkNxQkUsR0FDVEMsRUFVWixTQUFvQjNCLEdBQ2hCLE1BQU0yQixFQUFPM0ksU0FBU1csY0FBYyxRQVVwQyxPQVRBZ0ksRUFBS3ZOLEdBQUssY0FDVnVOLEVBQUtWLGlCQUFpQixVQUFXM0gsSUFDN0IsSUFBSTRILEVBQVlsSSxTQUFTQyxjQUFjLElBQUkrRyxFQUFPUixhQUM5Q2dCLEVBQWF4SCxTQUFTQyxjQUFjLElBQUkrRyxFQUFPUixZQUNuRFEsRUFBT1IsS0FBTzBCLEVBQVVVLE1BQ3hCcEIsRUFBV0MsWUFBY1QsRUFBT1IsS0FDaENtQyxFQUFLdkosU0FDTGtCLEVBQUV1SSxnQkFBZ0IsSUFFZkYsQ0FDWCxDQXRCbUJHLENBQVc5QixHQUNsQitCLEVBdUNaLFNBQW9CSixHQUNoQixNQUFNSSxFQUFTL0ksU0FBU1csY0FBYyxVQU90QyxPQU5Bb0ksRUFBTzNCLFVBQVVDLElBQUksc0JBQ3JCMEIsRUFBT04sVUFBWSxTQUNuQk0sRUFBT2QsaUJBQWlCLFNBQVUzSCxJQUM5QkEsRUFBRXVJLGlCQUNGRixFQUFLdkosUUFBUSxJQUVWMkosQ0FDWCxDQWhEcUJDLENBQVdMLEdBQ3hCQSxFQUFLbEksWUFBWXlILEdBQ2pCUyxFQUFLbEksWUFBWStILEdBQ2pCRyxFQUFLbEksWUFBWXNJLEdBQ2pCckIsRUFBYWpILFlBQVlrSSxFQUFLLElBRTNCWCxDQUNYLENBcEJ1QmlCLENBQWVqQyxHQUNsQ1UsRUFBYWpILFlBQVl1SCxFQUM3QixDREpJa0IsQ0FBb0JsQyxFQUFRakMsRUFDaEMsQ0FFQSxTQUFTb0UsRUFBWW5DLEdBQ2pCLElBQUssSUFBSVYsS0FBUVUsRUFBT2pDLE1BQU1VLE1BQzFCLElBQUssSUFBSVosS0FBU3lCLEVBQUsxQixPQUFPLENBQzFCLElBQUtOLEVBQUdDLEdBQUtNLEVBQ1R5QyxFQUFTdEgsU0FBU29KLGVBQWUsR0FBRzlFLElBQUlDLElBQUl5QyxFQUFPNUwsTUFDbkMsSUFBaEJrTCxFQUFLdkssT0FDTHVMLEVBQU96SCxNQUFNMEgsV0FBYSxVQUNKLElBQWhCakIsRUFBS3ZLLE9BQ1h1TCxFQUFPekgsTUFBTTBILFdBQWEsVUFDSixJQUFoQmpCLEVBQUt2SyxPQUNYdUwsRUFBT3pILE1BQU0wSCxXQUFhLFVBQ0osSUFBaEJqQixFQUFLdkssU0FDWHVMLEVBQU96SCxNQUFNMEgsV0FBYSxVQUVsQyxDQUVSLENBRUEsU0FBUzhCLEVBQVUvRSxFQUFHQyxFQUFJK0UsRUFBV3RDLEdBQ2pDdUMsUUFBUUMsSUFBSXhDLEVBQU9SLE1BQ25CLElBQUlpRCxFQUFZekosU0FBU29KLGVBQWUsR0FBRzlFLElBQUlDLElBQUl5QyxFQUFPNUwsTUFDeEMsU0FBZGtPLEVBQ0FHLEVBQVVoQyxZQUFjLElBRXhCZ0MsRUFBVXJDLFVBQVVDLElBQUksTUFFaEMsQ0F1Q0EsU0FBU3FDLEVBQVcxQyxHQUNoQixJQUFJdkIsRUFBUXVCLEVBQU9qQyxNQUFNVSxNQUN6QixJQUFLLElBQUl4SixFQUFJLEVBQUdBLEVBQUl3SixFQUFNMUosT0FBUUUsS0FDUixJQUFsQndKLEVBQU14SixHQUFHb0osT0FDTXJGLFNBQVNvSixlQUFlLEdBQUduTixJQUFJK0ssRUFBTzVMLE1BQzVDeUUsTUFBTTBILFdBQWEsVUFHeEMsQ0FFQSxTQUFTb0MsRUFBVTNDLEdBQ2YsSUFBSTRDLEVBQVM1SixTQUFTQyxjQUFjLFdBQ2hDNEosRUFBUTdKLFNBQVNDLGNBQWMsY0FDZixhQUFoQitHLEVBQU9SLE1BQ1BvRCxFQUFPeEMsVUFBVUMsSUFBSSxrQkFDckJ3QyxFQUFNekMsVUFBVUMsSUFBSSxtQkFDcEJ1QyxFQUFPbkMsWUFBYyxHQUFHVCxFQUFPUixlQUUvQm9ELEVBQU9uQyxZQUFjLEdBQUdULEVBQU9SLGFBQy9Cb0QsRUFBT3hDLFVBQVVDLElBQUksb0JBQ3JCd0MsRUFBTXpDLFVBQVVDLElBQUkscUJBRTVCLENFakdBLFNBQVN5QyxFQUFVeEYsRUFBR0MsR0FVbEIsR0FUYXZFLFNBQVNDLGNBQWMsV0FDN0J3SCxZQUFjLHVCQUNzQixJQUF2Q3pELEVBQWFnRCxFQUFPUCxNQUFPLENBQUNuQyxFQUFHQyxNQUNBLElBQTNCeUMsRUFBT2pDLE1BQU1zQixZQUFtRCxJQUE3QlksRUFBU2xDLE1BQU1zQixZQXFEOUQsU0FBb0IvQixFQUFHQyxHQUNuQixJQUFJK0UsRUFBWXJDLEVBQVNsQyxNQUFNcUIsY0FBYzlCLEVBQUdDLEdBQ2hEeUMsRUFBT1AsTUFBTXZMLEtBQUssQ0FBQ29KLEVBQUdDLElBQ3RCOEUsRUFBVS9FLEVBQUdDLEVBQUcrRSxFQUFXckMsR0FDM0J5QyxFQUFXekMsRUFDZixDQXpEWThDLENBQVd6RixFQUFHQyxHRmlDMUIsU0FBa0N5QyxHQUM5QixJQUFLLElBQUlWLEtBQVFVLEVBQU9qQyxNQUFNVSxNQUMxQixJQUFrQixJQUFkYSxFQUFLakIsS0FDTCxJQUFLLElBQUlSLEtBQVN5QixFQUFLMUIsT0FBTyxDQUMxQixJQUFLTixFQUFHQyxHQUFLTSxFQUNUeUMsRUFBU3RILFNBQVNvSixlQUFlLEdBQUc5RSxJQUFJQyxJQUFJeUMsRUFBTzVMLE1BQ25DLElBQWhCa0wsRUFBS3ZLLE9BQ0x1TCxFQUFPekgsTUFBTTBILFdBQWEsVUFDSixJQUFoQmpCLEVBQUt2SyxPQUNYdUwsRUFBT3pILE1BQU0wSCxXQUFhLFVBQ0osSUFBaEJqQixFQUFLdkssT0FDWHVMLEVBQU96SCxNQUFNMEgsV0FBYSxVQUNKLElBQWhCakIsRUFBS3ZLLFNBQ1h1TCxFQUFPekgsTUFBTTBILFdBQWEsVUFFbEMsQ0FHWixDRWxEWXlDLENBQXlCL0MsR0EwRHJDLFdBQ0ksSUFBSXJDLEVBQVNxQyxFQUFTSCxXQUNsQndDLEVBQVl0QyxFQUFPakMsTUFBTXFCLGNBQWN4QixFQUFPLEdBQUlBLEVBQU8sSUFDN0R5RSxFQUFVekUsRUFBTyxHQUFJQSxFQUFPLEdBQUkwRSxFQUFXdEMsR0FDM0MwQyxFQUFXMUMsR0pvQ2YsU0FBdUJDLEVBQVVxQyxFQUFXaEYsRUFBR0MsR0FDM0MsSUFBSUksRUFBUSxDQUFDLEVBQUUsRUFBRyxHQUFJLENBQUMsRUFBRyxHQUFJLENBQUMsRUFBRyxHQUFJLENBQUMsR0FBSSxJQUMzQyxHQUFJMkUsYUFBcUIsSUFBMkIsSUFBbkJBLEVBQVVqRSxLQUN2QyxJQUFLLElBQUlMLEtBQVFMLEVBQU0sQ0FDbkIsSUFBS00sRUFBSUMsR0FBTUYsRUFDWGlGLEVBQVcsQ0FBQzNGLEVBQUlXLEVBQUlWLEVBQUlXLEdBQ3pCWixFQUFJVyxHQUFNLEdBQUtWLEVBQUlXLEdBQU0sR0FBS1osRUFBSVcsRUFBS2dDLEVBQVNsQyxNQUFNRCxNQUFRUCxFQUFJVyxFQUFLK0IsRUFBU2xDLE1BQU1ELE1BQ3JGbUMsRUFBU1AsRUFBRXhMLEtBQUsrTyxFQUV4QixNQUV3QixJQUFuQlgsRUFBVWpFLE9BTXZCLFNBQTRCaUIsRUFBTVcsR0FDOUIsSUFBSXRDLEVBQVEsQ0FBQyxFQUFFLEVBQUcsR0FBSSxFQUFFLEVBQUcsR0FBSSxDQUFDLEVBQUcsR0FBSSxDQUFDLEVBQUcsR0FBSSxDQUFDLEVBQUcsR0FBSSxDQUFDLEdBQUksR0FBSSxDQUFDLEdBQUksR0FBSSxFQUFFLEdBQUksSUFDL0UsSUFBSyxJQUFJRSxLQUFTeUIsRUFBSzFCLE9BQU8sQ0FDMUIsSUFBS04sRUFBR0MsR0FBS00sRUFDYixJQUFLLElBQUlHLEtBQVFMLEVBQU0sQ0FDbkIsSUFBS00sRUFBSUMsR0FBTUYsRUFDZixHQUFJVixFQUFJVyxHQUFNLEdBQUtWLEVBQUlXLEdBQU0sR0FBS1osRUFBSVcsRUFBS2dDLEVBQVNsQyxNQUFNRCxNQUFRUCxFQUFJVyxFQUFLK0IsRUFBU2xDLE1BQU1ELE9BQ25DLElBQW5EZCxFQUFhaUQsRUFBU1IsTUFBTyxDQUFDbkMsRUFBSVcsRUFBSVYsRUFBSVcsSUFBYyxDQUNwRCxJQUFJZ0YsRUFBZSxDQUFDNUYsRUFBSVcsRUFBSVYsRUFBSVcsR0FDaEMrQixFQUFTUixNQUFNdkwsS0FBS2dQLEVBQzVCLENBQ0osQ0FDSixDQUNKLENBbEJRQyxDQUFtQmIsRUFBV3JDLEdBQzlCQSxFQUFTUCxFQUFJLEdBRXJCLENJbERJMEQsQ0FBY25ELEVBQVVxQyxFQUFXMUUsRUFBTyxHQUFJQSxFQUFPLEdBQ3pELENBL0RZeUYsS0FHeUIsSUFBN0JwRCxFQUFTbEMsTUFBTXNCLFVBSWQsT0FBK0IsSUFBM0JXLEVBQU9qQyxNQUFNc0IsV0FDbEI4QyxFQUFZbEMsUUFDWjBDLEVBQVUxQyxTQUZULEVBSEQwQyxFQUFVM0MsRUFRbEIsQyx5SENmSXBLLEVBQVUsQ0FBQyxFQ05mLFNBQVMwTixJQUNRdEssU0FBU0MsY0FBYyxXQUM3QndILFlBQWMsbUNBQ3JCTixFQUFZSCxHQUNaRyxFQUFZRixHQUNaa0MsRUFBWW5DLEdGb0NoQixXQUNJLElBQUssSUFBSS9LLEVBQUksRUFBR0EsRUFBSWdMLEVBQVNsQyxNQUFNRCxLQUFNN0ksSUFDckMsSUFBSyxJQUFJMkosRUFBSSxFQUFHQSxFQUFJcUIsRUFBU2xDLE1BQU1ELEtBQU1jLElBQ3hCNUYsU0FBU29KLGVBQWUsR0FBR25OLElBQUkySixJQUFJcUIsRUFBUzdMLE1BQ2xENk0saUJBQWlCLFNBQVMsS0FDN0I2QixFQUFVN04sRUFBRzJKLEVBQUUsR0FJL0IsQ0U1Q0kyRSxFQUNKLENEQ0EzTixFQUFRc0Usa0JBQW9CLElBQzVCdEUsRUFBUWdFLGNBQWdCLElBRWxCaEUsRUFBUWdELE9BQVMsU0FBYyxLQUFNLFFBRTNDaEQsRUFBUXFDLE9BQVMsSUFDakJyQyxFQUFRcUUsbUJBQXFCLElBRWhCLElBQUksSUFBU3JFLEdBS0osS0FBVyxZQUFpQixXQ1psRDBOLElGNENrQnRLLFNBQVNDLGNBQWMsWUFDN0JnSSxpQkFBaUIsU0FBUyxNQS9CdEMsV0FDSWpCLEVBQVMsSUFBSVQsRUFBTyxFQUFHLEdBQUdTLEVBQU9SLE9BQVEsSUFBSWhCLEVBQVUsS0FDdkR3QixFQUFPTCxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFDcENNLEVBQVcsSUFBSVYsRUFBTyxFQUFHLEdBQUdVLEVBQVNULE9BQVEsSUFBSWhCLEVBQVUsS0FDM0R5QixFQUFTTixVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFDdEMsSUFBSWlELEVBQVM1SixTQUFTQyxjQUFjLFdBQ2hDNEosRUFBUTdKLFNBQVNDLGNBQWMsY0FDbkMySixFQUFPeEMsVUFBVWhJLE9BQU93SyxFQUFPeEMsVUFBVXpMLEtBQUssSUFDOUNrTyxFQUFNekMsVUFBVWhJLE9BQU95SyxFQUFNekMsVUFBVXpMLEtBQUssSUFDNUMsSUFBSTZPLEVBQVN4SyxTQUFTeUssaUJBQWlCLGtCQUN2QyxJQUFLLElBQUkxRixLQUFTeUYsRUFDZCxLQUFPekYsRUFBTXRELFlBQ1RzRCxFQUFNMUQsWUFBWTBELEVBQU10RCxZQUdoQzZJLEdBQ0osQ0FnQlFJLEVBQVMsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9hc3NldHMvc3R5bGUuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2hlbHBlckZ1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vcmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vcmVuZGVyZXJIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vcGxheUdhbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL2Fzc2V0cy9zdHlsZS5jc3M/NmZkMiIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL29uVGFyZ2V0LnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIip7XFxyXFxuICAgIG1hcmdpbjogMHB4O1xcclxcbiAgICBwYWRkaW5nOiAwcHg7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcXHJcXG59XFxyXFxuXFxyXFxuYm9keXtcXHJcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZ2FwOiA2MHB4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgY29sb3I6ICM0MDQwNDA7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWYzZmY7XFxyXFxufVxcclxcblxcclxcbmgye1xcclxcbiAgICBmb250LXNpemU6IDNyZW07XFxyXFxufVxcclxcblxcclxcbiNzdGF0dXN7XFxyXFxuICAgIGZvbnQtc2l6ZTogMnJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI2dhbWVUYWJsZXtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGdhcDogNTBweDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6IDExMDBweDtcXHJcXG4gICAgaGVpZ2h0OiA3MDBweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2EzYTNhMztcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UyZThmMDtcXHJcXG4gICAgYm94LXNoYWRvdzogcmdiYSg1MCwgNTAsIDkzLCAwLjI1KSAwcHggNTBweCAxMDBweCAtMjBweCwgcmdiYSgwLCAwLCAwLCAwLjMpIDBweCAzMHB4IDYwcHggLTMwcHg7XFxyXFxufVxcclxcblxcclxcbiNib2FyZHNXcmFwcGVye1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxyXFxufVxcclxcblxcclxcbiNib2FyZEFuZE5hbWV7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogMTVweDtcXHJcXG59XFxyXFxuXFxyXFxuI3BsYXllck5hbWV7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xcclxcbn1cXHJcXG5cXHJcXG4jZWRpdEljb257XFxyXFxuICAgIHdpZHRoOiAxNXB4O1xcclxcbiAgICBoZWlnaHQ6IGF1dG87XFxyXFxufVxcclxcblxcclxcbi5ib2FyZCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gICAgd2lkdGg6IDMyMnB4O1xcclxcbiAgICBoZWlnaHQ6IDMyMnB4O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNTI1MjUyO1xcclxcbiAgICBib3gtc2hhZG93OiByZ2JhKDUwLCA1MCwgOTMsIDAuMjUpIDBweCA2cHggMTJweCAtMnB4LCByZ2JhKDAsIDAsIDAsIDAuMykgMHB4IDNweCA3cHggLTNweDtcXHJcXG59XFxyXFxuXFxyXFxuLnNxdWFyZSB7XFxyXFxuICAgIHdpZHRoOiAzMnB4O1xcclxcbiAgICBoZWlnaHQ6IDMycHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICM1MjUyNTI7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5zcXVhcmUuaGl0IHtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCBcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIiApICFpbXBvcnRhbnQ7XFxyXFxuICAgIGJhY2tncm91bmQtc2l6ZTogMjlweCAyOXB4ICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbmRpdiAuc3F1YXJlOmhvdmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4NzE3MSAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4jc2lkZUJhciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGdhcDogNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc2lkZVNoaXAge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNDA0MDQwO1xcclxcbn1cXHJcXG5cXHJcXG4uc2hpcENlbGx7XFxyXFxuICAgIHdpZHRoOiAxMnB4O1xcclxcbiAgICBoZWlnaHQ6IDEycHg7XFxyXFxufVxcclxcblxcclxcbiNyZXN0YXJ0e1xcclxcbiAgICB3aWR0aDogMTUwcHg7XFxyXFxuICAgIGhlaWdodDogNDVweDtcXHJcXG4gICAgYm9yZGVyOiAwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzOGJkZjg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xcclxcbiAgICBib3gtc2hhZG93OiByZ2JhKDUwLCA1MCwgOTMsIDAuMjUpIDBweCA2cHggMTJweCAtMnB4LCByZ2JhKDAsIDAsIDAsIDAuMykgMHB4IDNweCA3cHggLTNweDtcXHJcXG59XFxyXFxuXFxyXFxuI3Jlc3RhcnQ6aG92ZXJ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwZWE1ZTk7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnBsYXllcldpbnNUZXh0e1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgY29sb3I6ICM0YWRlODA7XFxyXFxufVxcclxcblxcclxcbi5wbGF5ZXJXaW5zVGFibGV7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCA1MHB4IDE1cHggIzRhZGU4MCAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4uY29tcHV0ZXJXaW5zVGV4dHtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGNvbG9yOiAjZWY0NDQ0O1xcclxcbn1cXHJcXG5cXHJcXG4uY29tcHV0ZXJXaW5zVGFibGV7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCA1MHB4IDE1cHggI2VmNDQ0NCAhaW1wb3J0YW50O1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9hc3NldHMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixzQkFBc0I7SUFDdEIsaUNBQWlDO0FBQ3JDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsU0FBUztJQUNULHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsY0FBYztJQUNkLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qix1QkFBdUI7SUFDdkIsU0FBUztJQUNULG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsYUFBYTtJQUNiLHlCQUF5QjtJQUN6QixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLCtGQUErRjtBQUNuRzs7QUFFQTtJQUNJLGFBQWE7SUFDYixXQUFXO0lBQ1gsNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixlQUFlO0lBQ2YsWUFBWTtJQUNaLGFBQWE7SUFDYix5QkFBeUI7SUFDekIseUZBQXlGO0FBQzdGOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsZUFBZTtJQUNmLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksc0VBQW9EO0lBQ3BELHFDQUFxQztBQUN6Qzs7QUFFQTtJQUNJLG9DQUFvQztBQUN4Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYixRQUFRO0FBQ1o7O0FBRUE7SUFDSSxhQUFhO0lBQ2IseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osWUFBWTtJQUNaLFdBQVc7SUFDWCx5QkFBeUI7SUFDekIsbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLHlGQUF5RjtBQUM3Rjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixlQUFlO0FBQ25COztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSw0Q0FBNEM7QUFDaEQ7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsY0FBYztBQUNsQjs7QUFFQTtJQUNJLDRDQUE0QztBQUNoRFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqe1xcclxcbiAgICBtYXJnaW46IDBweDtcXHJcXG4gICAgcGFkZGluZzogMHB4O1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICBmb250LWZhbWlseTogJ1JvYm90bycsIHNhbnMtc2VyaWY7XFxyXFxufVxcclxcblxcclxcbmJvZHl7XFxyXFxuICAgIGhlaWdodDogMTAwdmg7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogNjBweDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGNvbG9yOiAjNDA0MDQwO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmM2ZmO1xcclxcbn1cXHJcXG5cXHJcXG5oMntcXHJcXG4gICAgZm9udC1zaXplOiAzcmVtO1xcclxcbn1cXHJcXG5cXHJcXG4jc3RhdHVze1xcclxcbiAgICBmb250LXNpemU6IDJyZW07XFxyXFxufVxcclxcblxcclxcbiNnYW1lVGFibGV7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBnYXA6IDUwcHg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIHdpZHRoOiAxMTAwcHg7XFxyXFxuICAgIGhlaWdodDogNzAwcHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNhM2EzYTM7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMmU4ZjA7XFxyXFxuICAgIGJveC1zaGFkb3c6IHJnYmEoNTAsIDUwLCA5MywgMC4yNSkgMHB4IDUwcHggMTAwcHggLTIwcHgsIHJnYmEoMCwgMCwgMCwgMC4zKSAwcHggMzBweCA2MHB4IC0zMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jYm9hcmRzV3JhcHBlcntcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcclxcbn1cXHJcXG5cXHJcXG4jYm9hcmRBbmROYW1le1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBnYXA6IDE1cHg7XFxyXFxufVxcclxcblxcclxcbiNwbGF5ZXJOYW1le1xcclxcbiAgICBmb250LXNpemU6IDEuMXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI2VkaXRJY29ue1xcclxcbiAgICB3aWR0aDogMTVweDtcXHJcXG4gICAgaGVpZ2h0OiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4uYm9hcmQge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICAgIHdpZHRoOiAzMjJweDtcXHJcXG4gICAgaGVpZ2h0OiAzMjJweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzUyNTI1MjtcXHJcXG4gICAgYm94LXNoYWRvdzogcmdiYSg1MCwgNTAsIDkzLCAwLjI1KSAwcHggNnB4IDEycHggLTJweCwgcmdiYSgwLCAwLCAwLCAwLjMpIDBweCAzcHggN3B4IC0zcHg7XFxyXFxufVxcclxcblxcclxcbi5zcXVhcmUge1xcclxcbiAgICB3aWR0aDogMzJweDtcXHJcXG4gICAgaGVpZ2h0OiAzMnB4O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNTI1MjUyO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uc3F1YXJlLmhpdCB7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCggJy4vb25UYXJnZXQuc3ZnJyApICFpbXBvcnRhbnQ7XFxyXFxuICAgIGJhY2tncm91bmQtc2l6ZTogMjlweCAyOXB4ICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbmRpdiAuc3F1YXJlOmhvdmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4NzE3MSAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4jc2lkZUJhciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGdhcDogNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc2lkZVNoaXAge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNDA0MDQwO1xcclxcbn1cXHJcXG5cXHJcXG4uc2hpcENlbGx7XFxyXFxuICAgIHdpZHRoOiAxMnB4O1xcclxcbiAgICBoZWlnaHQ6IDEycHg7XFxyXFxufVxcclxcblxcclxcbiNyZXN0YXJ0e1xcclxcbiAgICB3aWR0aDogMTUwcHg7XFxyXFxuICAgIGhlaWdodDogNDVweDtcXHJcXG4gICAgYm9yZGVyOiAwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzOGJkZjg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xcclxcbiAgICBib3gtc2hhZG93OiByZ2JhKDUwLCA1MCwgOTMsIDAuMjUpIDBweCA2cHggMTJweCAtMnB4LCByZ2JhKDAsIDAsIDAsIDAuMykgMHB4IDNweCA3cHggLTNweDtcXHJcXG59XFxyXFxuXFxyXFxuI3Jlc3RhcnQ6aG92ZXJ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwZWE1ZTk7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnBsYXllcldpbnNUZXh0e1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgY29sb3I6ICM0YWRlODA7XFxyXFxufVxcclxcblxcclxcbi5wbGF5ZXJXaW5zVGFibGV7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCA1MHB4IDE1cHggIzRhZGU4MCAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4uY29tcHV0ZXJXaW5zVGV4dHtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGNvbG9yOiAjZWY0NDQ0O1xcclxcbn1cXHJcXG5cXHJcXG4uY29tcHV0ZXJXaW5zVGFibGV7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCA1MHB4IDE1cHggI2VmNDQ0NCAhaW1wb3J0YW50O1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICFzY3JpcHRVcmwpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImltcG9ydCB7IFNoaXAsIGNvbXB1dGVyIH0gZnJvbSBcIi4vY2xhc3Nlc1wiO1xyXG5cclxuZnVuY3Rpb24gYXJyYXlJbkFycmF5KGFycmF5LCBpdGVtKXtcclxuICAgIGxldCBzdHJJdGVtID0gSlNPTi5zdHJpbmdpZnkoaXRlbSk7XHJcbiAgICBsZXQgY29udGFpbnMgPSAoZWwpID0+IEpTT04uc3RyaW5naWZ5KGVsKSA9PT0gc3RySXRlbTtcclxuICAgIHJldHVybiBhcnJheS5zb21lKGNvbnRhaW5zKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGVzdHRyeVBsYWNlKHgsIHksIGxlbiwgZGlyZWN0aW9uKXtcclxuICAgIGxldCB2YWxpZCA9IGZhbHNlO1xyXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJ1cFwiKXtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh4IC0gaSA8IDAgfHwgdGhpcy5ib2FyZFt4IC0gaV1beV0gaW5zdGFuY2VvZiBTaGlwKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeCAtIGxlbiA+PSAwICYmIHRoaXMuYm9hcmRbeCAtIGxlbl1beV0gaW5zdGFuY2VvZiBTaGlwKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDsvL2NoZWNrcyB1cHBlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5ICsgMSA8IHRoaXMuc2l6ZSAmJiB0aGlzLmJvYXJkW3ggLSBpXVt5ICsgMV0gaW5zdGFuY2VvZiBTaGlwKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDsvL2NoZWNrcyByaWdodCBjZWxscyBmb3Igc2hpcCBsZW5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeCArIDEgPCB0aGlzLnNpemUgJiYgdGhpcy5ib2FyZFt4ICsgMV1beV0gaW5zdGFuY2VvZiBTaGlwKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDsvL2NoZWNrcyB1bmRlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5IC0gMSA+PSAwICYmIHRoaXMuYm9hcmRbeCAtIGldW3kgLSAxXSBpbnN0YW5jZW9mIFNoaXApe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkOy8vY2hlY2tzIGxlZnQgY2VsbHMgZm9yIHNoaXAgbGVuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHggLSBsZW4gPj0gMCAmJiB5IC0gMSA+PSAwICYmIHRoaXMuYm9hcmRbeCAtIGxlbl1beSAtIDFdIGluc3RhbmNlb2YgU2hpcCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWQ7Ly9jaGVja3MgdXBwZXJMZWZ0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHggLSBsZW4gPj0gMCAmJiB5ICsgMSA8IHRoaXMuc2l6ZSAmJiB0aGlzLmJvYXJkW3ggLSBsZW5dW3kgKyAxXSBpbnN0YW5jZW9mIFNoaXApe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkOy8vY2hlY2tzIHVwcGVyUmlnaHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeCArIDEgPCB0aGlzLnNpemUgJiYgeSArIDEgPCB0aGlzLnNpemUgJiYgdGhpcy5ib2FyZFt4ICsgMV1beSArIDFdIGluc3RhbmNlb2YgU2hpcCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWQ7Ly9jaGVja3MgdW5kZXJSaWdodFxyXG4gICAgICAgICAgICB9ICBcclxuICAgICAgICAgICAgaWYgKHggKyAxIDwgdGhpcy5zaXplICYmIHkgLSAxID49IDAgJiYgdGhpcy5ib2FyZFt4ICsgMV1beSAtIDFdIGluc3RhbmNlb2YgU2hpcCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWQ7Ly9jaGVja3MgdW5kZXJMZWZ0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICAgXHJcbiAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiKXtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh5ICsgaSA+PSB0aGlzLnNpemUgfHwgdGhpcy5ib2FyZFt4XVt5ICsgaV0gaW5zdGFuY2VvZiBTaGlwKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeSAtIDEgPj0gMCAmJiB0aGlzLmJvYXJkW3hdW3kgLSAxXSBpbnN0YW5jZW9mIFNoaXApe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkOy8vY2hlY2tzIGxlZnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeCAtIDEgPj0gMCAmJiB0aGlzLmJvYXJkW3ggLSAxXVt5ICsgaV0gaW5zdGFuY2VvZiBTaGlwKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDsvL2NoZWNrcyB1cHBlciBjZWxscyBmb3Igc2hpcCBsZW5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeSArIGxlbiA8IHRoaXMuc2l6ZSAmJiB0aGlzLmJvYXJkW3hdW3kgKyBsZW5dIGluc3RhbmNlb2YgU2hpcCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWQ7Ly9jaGVja3MgcmlnaHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeCArIDEgPCB0aGlzLnNpemUgJiYgdGhpcy5ib2FyZFt4ICsgMV1beSArIGldIGluc3RhbmNlb2YgU2hpcCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWQ7Ly9jaGVja3MgdW5kZXIgY2VsbHMgZm9yIHNoaXAgbGVuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHkgLSAxID49IDAgJiYgeCArIDEgPCB0aGlzLnNpemUgJiYgdGhpcy5ib2FyZFt4ICsgMV1beSAtIDFdIGluc3RhbmNlb2YgU2hpcCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWQ7Ly9jaGVja3MgbGVmdEJvdHRvbVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5IC0gMSA+PSAwICYmIHggLSAxID49IDAgJiYgdGhpcy5ib2FyZFt4IC0gMV1beSAtIDFdIGluc3RhbmNlb2YgU2hpcCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWQ7Ly9jaGVja3MgbGVmdFRvcFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5ICsgbGVuIDwgdGhpcy5zaXplICYmIHggLSAxID49IDAgJiYgdGhpcy5ib2FyZFt4IC0gMV1beSArIGxlbl0gaW5zdGFuY2VvZiBTaGlwKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDsvL2NoZWNrcyByaWdodFRvcFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5ICsgbGVuIDwgdGhpcy5zaXplICYmIHggKyAxIDwgdGhpcy5zaXplICYmIHRoaXMuYm9hcmRbeCArIDFdW3kgKyBsZW5dIGluc3RhbmNlb2YgU2hpcCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWQ7Ly9jaGVja3MgcmlnaHRCb3R0b21cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgfVxyXG59XHJcblxyXG4vL2FsdGVybmF0aXZlIHRyeVBsYWNlIGZvciBwcmFjdGljZVxyXG5mdW5jdGlvbiB0cnlQbGFjZSh4LCB5LCBsZW4sIGRpcmVjdGlvbil7XHJcbiAgICBsZXQgdmFsaWQgPSBmYWxzZTtcclxuICAgIGxldCBtb3ZlcyA9IFtbLTEsIDBdLCBbLTEsIDFdLCBbMCwgMV0sIFsxLCAxXSwgWzEsIDBdLCBbMSwgLTFdLCBbMCwgLTFdLCBbLTEsIC0xXV07XHJcbiAgICBsZXQgY29vcmRzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJ1cFwiICYmIHggLSBpID49IDApe1xyXG4gICAgICAgICAgICBsZXQgY29vcmQgPSBbeCAtIGksIHldO1xyXG4gICAgICAgICAgICBjb29yZHMucHVzaChjb29yZCk7XHJcbiAgICAgICAgfWVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiICYmIHkgKyBpIDwgdGhpcy5zaXplKXtcclxuICAgICAgICAgICAgbGV0IGNvb3JkID0gW3gsIHkgKyBpXTtcclxuICAgICAgICAgICAgY29vcmRzLnB1c2goY29vcmQpO1xyXG4gICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAobGV0IGNvb3JkIG9mIGNvb3Jkcyl7XHJcbiAgICAgICAgbGV0IFt4LCB5XSA9IGNvb3JkO1xyXG4gICAgICAgIGlmICh0aGlzLmJvYXJkW3hdW3ldIGluc3RhbmNlb2YgU2hpcCl7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgbW92ZSBvZiBtb3Zlcyl7XHJcbiAgICAgICAgICAgIGxldCBbZHgsIGR5XSA9IG1vdmU7XHJcbiAgICAgICAgICAgIGlmICh4ICsgZHggPj0gMCAmJiB5ICsgZHkgPj0gMCAmJiB4ICsgZHggPCB0aGlzLnNpemUgJiYgeSArIGR5IDwgdGhpcy5zaXplICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3ggKyBkeF1beSArIGR5XSBpbnN0YW5jZW9mIFNoaXApe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YWxpZCA9IHRydWU7XHJcbiAgICByZXR1cm4gdmFsaWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrQWRqYWNlbnQoY29tcHV0ZXIsIGhpdE9yTWlzcywgeCwgeSl7XHJcbiAgICBsZXQgbW92ZXMgPSBbWy0xLCAwXSwgWzAsIDFdLCBbMSwgMF0sIFswLCAtMV1dO1xyXG4gICAgaWYgKGhpdE9yTWlzcyBpbnN0YW5jZW9mIFNoaXAgJiYgaGl0T3JNaXNzLnN1bmsgIT09IHRydWUpe1xyXG4gICAgICAgIGZvciAobGV0IG1vdmUgb2YgbW92ZXMpe1xyXG4gICAgICAgICAgICBsZXQgW2R4LCBkeV0gPSBtb3ZlO1xyXG4gICAgICAgICAgICBsZXQgbmV4dE1vdmUgPSBbeCArIGR4LCB5ICsgZHldO1xyXG4gICAgICAgICAgICBpZih4ICsgZHggPj0gMCAmJiB5ICsgZHkgPj0gMCAmJiB4ICsgZHggPCBjb21wdXRlci5ib2FyZC5zaXplICYmIHkgKyBkeSA8IGNvbXB1dGVyLmJvYXJkLnNpemUpe1xyXG4gICAgICAgICAgICAgICAgY29tcHV0ZXIucS5wdXNoKG5leHRNb3ZlKTtcclxuICAgICAgICAgICAgfSAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGhpdE9yTWlzcy5zdW5rID09PSB0cnVlKXtcclxuICAgICAgICBhZGRBZGphY2VudFRvU2hvdHMoaGl0T3JNaXNzLCBjb21wdXRlcik7XHJcbiAgICAgICAgY29tcHV0ZXIucSA9IFtdO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRBZGphY2VudFRvU2hvdHMoc2hpcCwgY29tcHV0ZXIpe1xyXG4gICAgbGV0IG1vdmVzID0gW1stMSwgMF0sIFstMSwgMV0sIFswLCAxXSwgWzEsIDFdLCBbMSwgMF0sIFsxLCAtMV0sIFswLCAtMV0sIFstMSwgLTFdXTtcclxuICAgIGZvciAobGV0IGNvb3JkIG9mIHNoaXAuY29vcmRzKXtcclxuICAgICAgICBsZXQgW3gsIHldID0gY29vcmQ7XHJcbiAgICAgICAgZm9yIChsZXQgbW92ZSBvZiBtb3Zlcyl7XHJcbiAgICAgICAgICAgIGxldCBbZHgsIGR5XSA9IG1vdmU7XHJcbiAgICAgICAgICAgIGlmICh4ICsgZHggPj0gMCAmJiB5ICsgZHkgPj0gMCAmJiB4ICsgZHggPCBjb21wdXRlci5ib2FyZC5zaXplICYmIHkgKyBkeSA8IGNvbXB1dGVyLmJvYXJkLnNpemUgJiZcclxuICAgICAgICAgICAgICAgIGFycmF5SW5BcnJheShjb21wdXRlci5zaG90cywgW3ggKyBkeCwgeSArIGR5XSkgIT09IHRydWUpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb29yZFRvU2hvdHMgPSBbeCArIGR4LCB5ICsgZHldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXB1dGVyLnNob3RzLnB1c2goY29vcmRUb1Nob3RzKTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7YXJyYXlJbkFycmF5LCB0cnlQbGFjZSwgY2hlY2tBZGphY2VudH1cclxuXHJcbiIsImltcG9ydCB7IGFycmF5SW5BcnJheSwgdHJ5UGxhY2UgfSBmcm9tIFwiLi9oZWxwZXJGdW5jdGlvbnNcIjtcclxuXHJcbmNsYXNzIFNoaXAge1xyXG4gICAgY29uc3RydWN0b3IobGVuZ3RoKXtcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcclxuICAgICAgICB0aGlzLnRpbWVzSGl0ID0gMDtcclxuICAgICAgICB0aGlzLnN1bmsgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGhpdCgpe1xyXG4gICAgICAgIHRoaXMudGltZXNIaXQgKz0gMTtcclxuICAgICAgICB0aGlzLmlzU3VuaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzU3Vuaygpe1xyXG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gdGhpcy50aW1lc0hpdCl7XHJcbiAgICAgICAgICAgIHRoaXMuc3VuayA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBHYW1lYm9hcmQge1xyXG4gICAgY29uc3RydWN0b3Ioc2l6ZSl7XHJcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcclxuICAgICAgICB0aGlzLmJvYXJkID0gW107XHJcbiAgICAgICAgdGhpcy5mbGVldCA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUJvYXJkKCl7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgcm93ID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmQucHVzaChyb3cpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuc2l6ZTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW2ldW2pdID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ib2FyZDtcclxuICAgIH1cclxuXHJcbiAgICBtYWtlQ29vcmRpbmF0ZXMobGVuKXtcclxuICAgICAgICBsZXQgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB3aGlsZSghdmFsaWQpe1xyXG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBbXCJ1cFwiLCBcInJpZ2h0XCJdO1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5zaXplKTtcclxuICAgICAgICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuc2l6ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmREaXJlY3Rpb24gPSBkaXJlY3Rpb25bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZGlyZWN0aW9uLmxlbmd0aCldO1xyXG4gICAgICAgICAgICB2YWxpZCA9IHRyeVBsYWNlLmNhbGwodGhpcywgeCwgeSwgbGVuLCByYW5kRGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHZhbGlkKXtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxhY2VTaGlwKHgsIHksIGxlbiwgcmFuZERpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3gsIHksIGxlbiwgcmFuZERpcmVjdGlvbl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcGxhY2VTaGlwKHgsIHksIGxlbiwgZGlyZWN0aW9uKXtcclxuICAgICAgICBsZXQgbmV3U2hpcCA9IG5ldyBTaGlwKGxlbik7XHJcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJyl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB4OyBpID4geCAtIGxlbjsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW2ldW3ldID0gbmV3U2hpcDtcclxuICAgICAgICAgICAgICAgIG5ld1NoaXAuY29vcmRzLnB1c2goW2ksIHldKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiKXtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHk7IGkgPCB5ICsgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbeF1baV0gPSBuZXdTaGlwO1xyXG4gICAgICAgICAgICAgICAgbmV3U2hpcC5jb29yZHMucHVzaChbeCwgaV0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mbGVldC5wdXNoKG5ld1NoaXApO1xyXG4gICAgICAgIHJldHVybiBuZXdTaGlwO1xyXG4gICAgfVxyXG5cclxuICAgIHJlY2VpdmVBdHRhY2soeCwgeSl7XHJcbiAgICAgICAgaWYgKHRoaXMuYm9hcmRbeF1beV0gaW5zdGFuY2VvZiBTaGlwKXtcclxuICAgICAgICAgICAgdGhpcy5ib2FyZFt4XVt5XS5oaXQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm9hcmRbeF1beV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmJvYXJkW3hdW3ldID0gXCJtaXNzXCI7XHJcbiAgICB9XHJcblxyXG4gICAgYWxsU3Vuaygpe1xyXG4gICAgICAgIGZvciAobGV0IHNoaXAgb2YgdGhpcy5mbGVldCl7XHJcbiAgICAgICAgICAgIGlmIChzaGlwLnN1bmsgPT09IGZhbHNlKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgUGxheWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCBuYW1lLCBib2FyZCl7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5ib2FyZCA9IGJvYXJkO1xyXG4gICAgICAgIHRoaXMuc2hvdHMgPSBbXTtcclxuICAgICAgICB0aGlzLnEgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBib2FyZEluaXQoZmxlZXRUb1BsYWNlKXtcclxuICAgICAgICB0aGlzLmJvYXJkLmNyZWF0ZUJvYXJkKCk7XHJcbiAgICAgICAgZm9yIChsZXQgc2hpcExlbiBvZiBmbGVldFRvUGxhY2Upe1xyXG4gICAgICAgICAgICB0aGlzLmJvYXJkLm1ha2VDb29yZGluYXRlcyhzaGlwTGVuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9hcmQuZmxlZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgbWFrZVNob3QoeCA9IHVuZGVmaW5lZCwgeSA9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgbGV0IHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMucS5sZW5ndGggIT09IDApe1xyXG4gICAgICAgICAgICB3aGlsZSAoIXZhbGlkKXtcclxuICAgICAgICAgICAgICAgIGxldCBbeCwgeV0gPSB0aGlzLnFbMF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnEuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheUluQXJyYXkodGhpcy5zaG90cywgW3gsIHldKSAhPT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG90cy5wdXNoKFt4LCB5XSlcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gXHJcbiAgICAgICAgd2hpbGUoIXZhbGlkKXtcclxuICAgICAgICAgICAgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuYm9hcmQuc2l6ZSk7XHJcbiAgICAgICAgICAgIHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmJvYXJkLnNpemUpO1xyXG4gICAgICAgICAgICBpZiAoYXJyYXlJbkFycmF5KHRoaXMuc2hvdHMsIFt4LCB5XSkgIT09IHRydWUpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG90cy5wdXNoKFt4LCB5XSlcclxuICAgICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICAgICAgXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRQbGF5ZXJzKCl7XHJcbiAgICBsZXQgcGxheWVyID0gbmV3IFBsYXllcigxLCBcIlBsYXllclwiLCBuZXcgR2FtZWJvYXJkKDEwKSk7XHJcbiAgICBwbGF5ZXIuYm9hcmRJbml0KFs0LDMsMywyLDIsMiwxLDEsMSwxXSk7XHJcbiAgICBsZXQgY29tcHV0ZXIgPSBuZXcgUGxheWVyKDIsIFwiQ29tcHV0ZXJcIiwgbmV3IEdhbWVib2FyZCgxMCkpO1xyXG4gICAgY29tcHV0ZXIuYm9hcmRJbml0KFs0LDMsMywyLDIsMiwxLDEsMSwxXSk7XHJcbiAgICByZXR1cm4gW3BsYXllciwgY29tcHV0ZXJdXHJcbn1cclxuXHJcbmxldCBbcGxheWVyLCBjb21wdXRlcl0gPSBpbml0UGxheWVycygpO1xyXG5cclxuZXhwb3J0IHtTaGlwLCBHYW1lYm9hcmQsIFBsYXllciwgcGxheWVyLCBjb21wdXRlcn07IiwiaW1wb3J0IHsgY3JlYXRlQm9hcmRFbGVtZW50cyB9IGZyb20gJy4vcmVuZGVyZXJIZWxwZXInO1xyXG5cclxuZnVuY3Rpb24gcmVuZGVyQm9hcmQocGxheWVyKXtcclxuICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGJvYXJkLmNsYXNzTGlzdC5hZGQoXCJib2FyZFwiKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxheWVyLmJvYXJkLnNpemU7IGkrKykge1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGxheWVyLmJvYXJkLnNpemU7IGorKykge1xyXG4gICAgICAgICAgICBsZXQgc3F1YXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVcIik7XHJcbiAgICAgICAgICAgIHNxdWFyZS5pZCA9IGAke2l9JHtqfSR7cGxheWVyLmlkfWBcclxuICAgICAgICAgICAgc3F1YXJlLnN0eWxlLmJhY2tncm91bmQgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIGJvYXJkLmFwcGVuZENoaWxkKHNxdWFyZSk7XHJcbiAgICAgICAgfSAgIFxyXG4gICAgfVxyXG4gICAgY3JlYXRlQm9hcmRFbGVtZW50cyhwbGF5ZXIsIGJvYXJkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyU2hpcHMocGxheWVyKXtcclxuICAgIGZvciAobGV0IHNoaXAgb2YgcGxheWVyLmJvYXJkLmZsZWV0KXtcclxuICAgICAgICBmb3IgKGxldCBjb29yZCBvZiBzaGlwLmNvb3Jkcyl7XHJcbiAgICAgICAgICAgIGxldCBbeCwgeV0gPSBjb29yZDtcclxuICAgICAgICAgICAgbGV0IHNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3h9JHt5fSR7cGxheWVyLmlkfWApXHJcbiAgICAgICAgICAgIGlmIChzaGlwLmxlbmd0aCA9PT0gNCl7XHJcbiAgICAgICAgICAgICAgICBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZCA9IFwiIzg2ZWZhY1wiO1xyXG4gICAgICAgICAgICB9ZWxzZSBpZiAoc2hpcC5sZW5ndGggPT09IDMpe1xyXG4gICAgICAgICAgICAgICAgc3F1YXJlLnN0eWxlLmJhY2tncm91bmQgPSBcIiM2N2U4ZjlcIjtcclxuICAgICAgICAgICAgfWVsc2UgaWYgKHNoaXAubGVuZ3RoID09PSAyKXtcclxuICAgICAgICAgICAgICAgIHNxdWFyZS5zdHlsZS5iYWNrZ3JvdW5kID0gXCIjZDhiNGZlXCI7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmIChzaGlwLmxlbmd0aCA9PT0gMSl7XHJcbiAgICAgICAgICAgICAgICBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZCA9IFwiI2Y5YThkNFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJIaXQoeCwgeSAsIGhpdE9yTWlzcywgcGxheWVyKXtcclxuICAgIGNvbnNvbGUubG9nKHBsYXllci5uYW1lKVxyXG4gICAgbGV0IGhpdFNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3h9JHt5fSR7cGxheWVyLmlkfWApO1xyXG4gICAgaWYgKGhpdE9yTWlzcyA9PT0gXCJtaXNzXCIpe1xyXG4gICAgICAgIGhpdFNxdWFyZS50ZXh0Q29udGVudCA9IFwiXFx1MjAyMlwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBoaXRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImhpdFwiKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyRW5lbXlTaGlwQWZ0ZXJTdW5rKHBsYXllcil7XHJcbiAgICBmb3IgKGxldCBzaGlwIG9mIHBsYXllci5ib2FyZC5mbGVldCl7XHJcbiAgICAgICAgaWYgKHNoaXAuc3VuayA9PT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGNvb3JkIG9mIHNoaXAuY29vcmRzKXtcclxuICAgICAgICAgICAgICAgIGxldCBbeCwgeV0gPSBjb29yZDtcclxuICAgICAgICAgICAgICAgIGxldCBzcXVhcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt4fSR7eX0ke3BsYXllci5pZH1gKVxyXG4gICAgICAgICAgICAgICAgaWYgKHNoaXAubGVuZ3RoID09PSA0KXtcclxuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZCA9IFwiIzg2ZWZhY1wiO1xyXG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHNoaXAubGVuZ3RoID09PSAzKXtcclxuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZCA9IFwiIzY3ZThmOVwiO1xyXG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHNoaXAubGVuZ3RoID09PSAyKXtcclxuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZCA9IFwiI2Q4YjRmZVwiO1xyXG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHNoaXAubGVuZ3RoID09PSAxKXtcclxuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZCA9IFwiI2Y5YThkNFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJTaWRlQmFyRmxlZXQocGxheWVyKXtcclxuICAgIGNvbnN0IGZsZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGZsZWV0LmlkID0gXCJzaWRlQmFyXCI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYXllci5ib2FyZC5mbGVldC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgbGV0IHNpZGVTaGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBzaWRlU2hpcC5jbGFzc0xpc3QuYWRkKFwic2lkZVNoaXBcIik7XHJcbiAgICAgICAgc2lkZVNoaXAuaWQgPSBgJHtpfSR7cGxheWVyLmlkfWA7XHJcbiAgICAgICAgZmxlZXQuYXBwZW5kQ2hpbGQoc2lkZVNoaXApOyBcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBsYXllci5ib2FyZC5mbGVldFtpXS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBsZXQgc2hpcENlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBzaGlwQ2VsbC5jbGFzc0xpc3QuYWRkKFwic2hpcENlbGxcIik7XHJcbiAgICAgICAgICAgIHNpZGVTaGlwLmFwcGVuZENoaWxkKHNoaXBDZWxsKTtcclxuICAgICAgICB9ICBcclxuICAgIH1cclxuICAgIHJldHVybiBmbGVldDtcclxufVxyXG5cclxuZnVuY3Rpb24gc2lkZUJhckhpdChwbGF5ZXIpe1xyXG4gICAgbGV0IGZsZWV0ID0gcGxheWVyLmJvYXJkLmZsZWV0O1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbGVldC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgaWYgKGZsZWV0W2ldLnN1bmsgPT09IHRydWUpe1xyXG4gICAgICAgICAgICBsZXQgc2lkZVNoaXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtpfSR7cGxheWVyLmlkfWApO1xyXG4gICAgICAgICAgICBzaWRlU2hpcC5zdHlsZS5iYWNrZ3JvdW5kID0gXCIjZWY0NDQ0XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJXaW4ocGxheWVyKXtcclxuICAgIGxldCBzdGF0dXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXR1c1wiKTtcclxuICAgIGxldCB0YWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZ2FtZVRhYmxlXCIpO1xyXG4gICAgaWYgKHBsYXllci5uYW1lICE9PSBcIkNvbXB1dGVyXCIpe1xyXG4gICAgICAgIHN0YXR1cy5jbGFzc0xpc3QuYWRkKFwicGxheWVyV2luc1RleHRcIik7XHJcbiAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZChcInBsYXllcldpbnNUYWJsZVwiKTtcclxuICAgICAgICBzdGF0dXMudGV4dENvbnRlbnQgPSBgJHtwbGF5ZXIubmFtZX0gd2lucyFgO1xyXG4gICAgfSBlbHNle1xyXG4gICAgICAgIHN0YXR1cy50ZXh0Q29udGVudCA9IGAke3BsYXllci5uYW1lfSB3aW5zIWA7XHJcbiAgICAgICAgc3RhdHVzLmNsYXNzTGlzdC5hZGQoXCJjb21wdXRlcldpbnNUZXh0XCIpO1xyXG4gICAgICAgIHRhYmxlLmNsYXNzTGlzdC5hZGQoXCJjb21wdXRlcldpbnNUYWJsZVwiKTsgXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7cmVuZGVyQm9hcmQsIHJlbmRlclNoaXBzLCByZW5kZXJIaXQsIHNpZGVCYXJIaXQsIFxyXG4gICAgcmVuZGVyRW5lbXlTaGlwQWZ0ZXJTdW5rLCByZW5kZXJXaW4sIHJlbmRlclNpZGVCYXJGbGVldH0iLCJpbXBvcnQgZWRpdEljb24gZnJvbSAnLi4vLi4vYXNzZXRzL2VkaXQuc3ZnJztcclxuaW1wb3J0IHsgcmVuZGVyU2lkZUJhckZsZWV0IH0gZnJvbSAnLi9yZW5kZXJlcic7XHJcbmltcG9ydCB7IHBsYXllciB9IGZyb20gJy4uL2NsYXNzZXMnO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlQm9hcmRFbGVtZW50cyhwbGF5ZXIsIGJvYXJkKXtcclxuICAgIGNvbnN0IHBsYXllck5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgIHBsYXllck5hbWUuaWQgPSBgJHtwbGF5ZXIubmFtZX1OYW1lYDtcclxuICAgIHBsYXllck5hbWUudGV4dENvbnRlbnQgPSBwbGF5ZXIubmFtZTtcclxuICAgIGNvbnN0IGJvYXJkQW5kTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBib2FyZEFuZE5hbWUuaWQgPSBcImJvYXJkQW5kTmFtZVwiO1xyXG4gICAgY29uc3Qgc2lkZUZsZWV0ID0gcmVuZGVyU2lkZUJhckZsZWV0KHBsYXllcik7XHJcbiAgICBjb25zdCBib2FyZHNXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNib2FyZHNXcmFwcGVyXCIpO1xyXG4gICAgYm9hcmRBbmROYW1lLmFwcGVuZENoaWxkKHBsYXllck5hbWUpO1xyXG4gICAgYm9hcmRBbmROYW1lLmFwcGVuZENoaWxkKGJvYXJkKTtcclxuICAgIGJvYXJkQW5kTmFtZS5hcHBlbmRDaGlsZChzaWRlRmxlZXQpO1xyXG4gICAgYm9hcmRzV3JhcHBlci5hcHBlbmRDaGlsZChib2FyZEFuZE5hbWUpO1xyXG4gICAgY29uc3QgY2hhbmdlTmFtZSA9IGNyZWF0ZUVkaXRJY29uKHBsYXllcik7XHJcbiAgICBib2FyZEFuZE5hbWUuYXBwZW5kQ2hpbGQoY2hhbmdlTmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUVkaXRJY29uKHBsYXllcil7XHJcbiAgICBjb25zdCBib2FyZEFuZE5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2JvYXJkQW5kTmFtZVwiKTtcclxuICAgIGNvbnN0IGNoYW5nZU5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgY2hhbmdlTmFtZS5zcmMgPSBlZGl0SWNvbjtcclxuICAgIGNoYW5nZU5hbWUuaWQgPSBcImVkaXRJY29uXCI7XHJcbiAgICBjaGFuZ2VOYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IG5hbWVJbnB1dCA9IGZvcm1OYW1lKHBsYXllcik7XHJcbiAgICAgICAgbGV0IHN1Ym1pdCA9IGZvcm1TdWJtaXQoKTtcclxuICAgICAgICBsZXQgZm9ybSA9IGNyZWF0ZUZvcm0ocGxheWVyKTtcclxuICAgICAgICBsZXQgY2FuY2VsID0gZm9ybUNhbmNlbChmb3JtKTtcclxuICAgICAgICBmb3JtLmFwcGVuZENoaWxkKG5hbWVJbnB1dCk7XHJcbiAgICAgICAgZm9ybS5hcHBlbmRDaGlsZChzdWJtaXQpO1xyXG4gICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoY2FuY2VsKTtcclxuICAgICAgICBib2FyZEFuZE5hbWUuYXBwZW5kQ2hpbGQoZm9ybSk7XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGNoYW5nZU5hbWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUZvcm0ocGxheWVyKXtcclxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcclxuICAgIGZvcm0uaWQgPSBcInByb2plY3RGb3JtXCI7XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcclxuICAgICAgICBsZXQgbmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7cGxheWVyLm5hbWV9SW5wdXRgKTtcclxuICAgICAgICBsZXQgcGxheWVyTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3BsYXllci5uYW1lfU5hbWVgKTtcclxuICAgICAgICBwbGF5ZXIubmFtZSA9IG5hbWVJbnB1dC52YWx1ZTtcclxuICAgICAgICBwbGF5ZXJOYW1lLnRleHRDb250ZW50ID0gcGxheWVyLm5hbWU7XHJcbiAgICAgICAgZm9ybS5yZW1vdmUoKTsgIFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICBcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZvcm07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZvcm1OYW1lKHBsYXllcil7XHJcbiAgICBjb25zdCBuYW1laW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBuYW1laW5wdXQuaWQgPSBgJHtwbGF5ZXIubmFtZX1JbnB1dGA7XHJcbiAgICBuYW1laW5wdXQudHlwZSA9IFwidGV4dFwiO1xyXG4gICAgbmFtZWlucHV0LnBsYWNlaG9sZGVyID0gXCJ5b3VyIG5pY2tuYW1lXCI7XHJcbiAgICBuYW1laW5wdXQucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgcmV0dXJuIG5hbWVpbnB1dDtcclxufVxyXG5cclxuZnVuY3Rpb24gZm9ybVN1Ym1pdCgpe1xyXG4gICAgY29uc3Qgc3VibWl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgIHN1Ym1pdC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdEZvcm1CdXR0b25zXCIpO1xyXG4gICAgc3VibWl0LmlubmVyVGV4dCA9IFwiQWRkXCI7XHJcbiAgICByZXR1cm4gc3VibWl0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBmb3JtQ2FuY2VsKGZvcm0pe1xyXG4gICAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgIGNhbmNlbC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdEZvcm1CdXR0b25zXCIpO1xyXG4gICAgY2FuY2VsLmlubmVyVGV4dCA9IFwiQ2FuY2VsXCI7XHJcbiAgICBjYW5jZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyBcclxuICAgICAgICBmb3JtLnJlbW92ZSgpO1xyXG4gICAgfSlcclxuICAgIHJldHVybiBjYW5jZWw7XHJcbn1cclxuXHJcbmV4cG9ydCB7Y3JlYXRlQm9hcmRFbGVtZW50c30iLCJpbXBvcnQgeyByZW5kZXJIaXQsIHJlbmRlcldpbiwgcmVuZGVyU2hpcHMgfSBmcm9tIFwiLi9yZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBwbGF5ZXIsIGNvbXB1dGVyLCBQbGF5ZXIsIEdhbWVib2FyZCB9IGZyb20gXCIuLi9jbGFzc2VzXCI7XHJcbmltcG9ydCB7IHNpZGVCYXJIaXQgfSBmcm9tIFwiLi9yZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBhcnJheUluQXJyYXksIGNoZWNrQWRqYWNlbnQgfSBmcm9tIFwiLi4vaGVscGVyRnVuY3Rpb25zXCI7XHJcbmltcG9ydCB7IHJlbmRlckVuZW15U2hpcEFmdGVyU3VuayB9IGZyb20gXCIuL3JlbmRlcmVyXCI7XHJcbmltcG9ydCB7IGluaXRHYW1lIH0gZnJvbSAnLi4nO1xyXG5cclxuZnVuY3Rpb24gcGxheVJvdW5kKHgsIHkpe1xyXG4gICAgbGV0IHN0YXR1cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHVzXCIpO1xyXG4gICAgc3RhdHVzLnRleHRDb250ZW50ID0gXCJHYW1lIGlzIGluIHByb2dyZXNzXCI7XHJcbiAgICBpZiAoYXJyYXlJbkFycmF5KHBsYXllci5zaG90cywgW3gsIHldKSAhPT0gdHJ1ZSl7XHJcbiAgICAgICAgaWYgKHBsYXllci5ib2FyZC5hbGxTdW5rKCkgIT09IHRydWUgJiYgY29tcHV0ZXIuYm9hcmQuYWxsU3VuaygpICE9PSB0cnVlKXtcclxuICAgICAgICAgICAgcGxheWVyTW92ZSh4LCB5KTtcclxuICAgICAgICAgICAgcmVuZGVyRW5lbXlTaGlwQWZ0ZXJTdW5rKGNvbXB1dGVyKTtcclxuICAgICAgICAgICAgY29tcHV0ZXJNb3ZlKCk7ICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoY29tcHV0ZXIuYm9hcmQuYWxsU3VuaygpID09PSB0cnVlKXtcclxuICAgICAgICByZW5kZXJXaW4ocGxheWVyKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwbGF5ZXIuYm9hcmQuYWxsU3VuaygpID09PSB0cnVlKXtcclxuICAgICAgICByZW5kZXJTaGlwcyhjb21wdXRlcik7XHJcbiAgICAgICAgcmVuZGVyV2luKGNvbXB1dGVyKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9ICAgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5ld0dhbWUoKXtcclxuICAgIHBsYXllciA9IG5ldyBQbGF5ZXIoMSwgYCR7cGxheWVyLm5hbWV9YCwgbmV3IEdhbWVib2FyZCgxMCkpO1xyXG4gICAgcGxheWVyLmJvYXJkSW5pdChbNCwzLDMsMiwyLDIsMSwxLDEsMV0pO1xyXG4gICAgY29tcHV0ZXIgPSBuZXcgUGxheWVyKDIsIGAke2NvbXB1dGVyLm5hbWV9YCwgbmV3IEdhbWVib2FyZCgxMCkpO1xyXG4gICAgY29tcHV0ZXIuYm9hcmRJbml0KFs0LDMsMywyLDIsMiwxLDEsMSwxXSk7XHJcbiAgICBsZXQgc3RhdHVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0dXNcIik7XHJcbiAgICBsZXQgdGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dhbWVUYWJsZVwiKTtcclxuICAgIHN0YXR1cy5jbGFzc0xpc3QucmVtb3ZlKHN0YXR1cy5jbGFzc0xpc3QuaXRlbSgwKSk7XHJcbiAgICB0YWJsZS5jbGFzc0xpc3QucmVtb3ZlKHRhYmxlLmNsYXNzTGlzdC5pdGVtKDApKTtcclxuICAgIGxldCBib2FyZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI2JvYXJkc1dyYXBwZXJcIik7XHJcbiAgICBmb3IgKGxldCBib2FyZCBvZiBib2FyZHMpe1xyXG4gICAgICAgIHdoaWxlIChib2FyZC5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgIGJvYXJkLnJlbW92ZUNoaWxkKGJvYXJkLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGluaXRHYW1lKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsaWNrVG9IaXQoKXtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcHV0ZXIuYm9hcmQuc2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb21wdXRlci5ib2FyZC5zaXplOyBqKyspIHtcclxuICAgICAgICAgICAgbGV0IHNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2l9JHtqfSR7Y29tcHV0ZXIuaWR9YCk7XHJcbiAgICAgICAgICAgIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGxheVJvdW5kKGksIGopO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9ICAgXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc3RhcnRFdmVudCgpe1xyXG4gICAgbGV0IHJlc3RhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc3RhcnRcIik7XHJcbiAgICByZXN0YXJ0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgbmV3R2FtZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBsYXllck1vdmUoeCwgeSl7XHJcbiAgICBsZXQgaGl0T3JNaXNzID0gY29tcHV0ZXIuYm9hcmQucmVjZWl2ZUF0dGFjayh4LCB5KTtcclxuICAgIHBsYXllci5zaG90cy5wdXNoKFt4LCB5XSk7XHJcbiAgICByZW5kZXJIaXQoeCwgeSwgaGl0T3JNaXNzLCBjb21wdXRlcik7XHJcbiAgICBzaWRlQmFySGl0KGNvbXB1dGVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29tcHV0ZXJNb3ZlKCl7XHJcbiAgICBsZXQgY29vcmRzID0gY29tcHV0ZXIubWFrZVNob3QoKTtcclxuICAgIGxldCBoaXRPck1pc3MgPSBwbGF5ZXIuYm9hcmQucmVjZWl2ZUF0dGFjayhjb29yZHNbMF0sIGNvb3Jkc1sxXSk7XHJcbiAgICByZW5kZXJIaXQoY29vcmRzWzBdLCBjb29yZHNbMV0sIGhpdE9yTWlzcywgcGxheWVyKTtcclxuICAgIHNpZGVCYXJIaXQocGxheWVyKTtcclxuICAgIGNoZWNrQWRqYWNlbnQoY29tcHV0ZXIsIGhpdE9yTWlzcywgY29vcmRzWzBdLCBjb29yZHNbMV0pO1xyXG59XHJcblxyXG5leHBvcnQge3BsYXlSb3VuZCwgY2xpY2tUb0hpdCwgcmVzdGFydEV2ZW50LCBuZXdHYW1lfSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IHBsYXllciwgY29tcHV0ZXIgfSBmcm9tIFwiLi9jbGFzc2VzXCI7XHJcbmltcG9ydCB7IHJlbmRlckJvYXJkLCByZW5kZXJTaGlwc30gZnJvbSBcIi4vZG9tL3JlbmRlcmVyXCI7XHJcbmltcG9ydCB7IGNsaWNrVG9IaXQsIHJlc3RhcnRFdmVudCB9IGZyb20gXCIuL2RvbS9wbGF5R2FtZVwiO1xyXG5pbXBvcnQgJy4uL2Fzc2V0cy9zdHlsZS5jc3MnO1xyXG5cclxuZnVuY3Rpb24gaW5pdEdhbWUoKXtcclxuICAgIGxldCBzdGF0dXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXR1c1wiKTtcclxuICAgIHN0YXR1cy50ZXh0Q29udGVudCA9IFwiTGV0J3MgUGxheSEgSGl0IHRoZSBlbmVteSBib2FyZCFcIjtcclxuICAgIHJlbmRlckJvYXJkKHBsYXllcik7XHJcbiAgICByZW5kZXJCb2FyZChjb21wdXRlcik7XHJcbiAgICByZW5kZXJTaGlwcyhwbGF5ZXIpO1xyXG4gICAgY2xpY2tUb0hpdCgpO1xyXG59XHJcblxyXG5pbml0R2FtZSgpO1xyXG5yZXN0YXJ0RXZlbnQoKTtcclxuXHJcbmV4cG9ydCB7aW5pdEdhbWV9O1xyXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwiYXJyYXlJbkFycmF5IiwiYXJyYXkiLCJzdHJJdGVtIiwic29tZSIsImVsIiwidHJ5UGxhY2UiLCJ4IiwieSIsImxlbiIsImRpcmVjdGlvbiIsInZhbGlkIiwibW92ZXMiLCJjb29yZHMiLCJjb29yZCIsInNpemUiLCJib2FyZCIsIm1vdmUiLCJkeCIsImR5IiwiY29uc3RydWN0b3IiLCJ0aW1lc0hpdCIsInN1bmsiLCJoaXQiLCJpc1N1bmsiLCJHYW1lYm9hcmQiLCJmbGVldCIsImNyZWF0ZUJvYXJkIiwicm93IiwiaiIsIm1ha2VDb29yZGluYXRlcyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmREaXJlY3Rpb24iLCJwbGFjZVNoaXAiLCJuZXdTaGlwIiwicmVjZWl2ZUF0dGFjayIsImFsbFN1bmsiLCJzaGlwIiwiUGxheWVyIiwibmFtZSIsInNob3RzIiwicSIsImJvYXJkSW5pdCIsImZsZWV0VG9QbGFjZSIsInNoaXBMZW4iLCJtYWtlU2hvdCIsInNoaWZ0IiwicGxheWVyIiwiY29tcHV0ZXIiLCJpbml0UGxheWVycyIsInJlbmRlckJvYXJkIiwiY2xhc3NMaXN0IiwiYWRkIiwic3F1YXJlIiwiYmFja2dyb3VuZCIsInBsYXllck5hbWUiLCJ0ZXh0Q29udGVudCIsImJvYXJkQW5kTmFtZSIsInNpZGVGbGVldCIsInNpZGVTaGlwIiwic2hpcENlbGwiLCJyZW5kZXJTaWRlQmFyRmxlZXQiLCJib2FyZHNXcmFwcGVyIiwiY2hhbmdlTmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJuYW1lSW5wdXQiLCJuYW1laW5wdXQiLCJ0eXBlIiwicGxhY2Vob2xkZXIiLCJyZXF1aXJlZCIsImZvcm1OYW1lIiwic3VibWl0IiwiaW5uZXJUZXh0IiwiZm9ybVN1Ym1pdCIsImZvcm0iLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwiY3JlYXRlRm9ybSIsImNhbmNlbCIsImZvcm1DYW5jZWwiLCJjcmVhdGVFZGl0SWNvbiIsImNyZWF0ZUJvYXJkRWxlbWVudHMiLCJyZW5kZXJTaGlwcyIsImdldEVsZW1lbnRCeUlkIiwicmVuZGVySGl0IiwiaGl0T3JNaXNzIiwiY29uc29sZSIsImxvZyIsImhpdFNxdWFyZSIsInNpZGVCYXJIaXQiLCJyZW5kZXJXaW4iLCJzdGF0dXMiLCJ0YWJsZSIsInBsYXlSb3VuZCIsInBsYXllck1vdmUiLCJyZW5kZXJFbmVteVNoaXBBZnRlclN1bmsiLCJuZXh0TW92ZSIsImNvb3JkVG9TaG90cyIsImFkZEFkamFjZW50VG9TaG90cyIsImNoZWNrQWRqYWNlbnQiLCJjb21wdXRlck1vdmUiLCJpbml0R2FtZSIsImNsaWNrVG9IaXQiLCJib2FyZHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibmV3R2FtZSJdLCJzb3VyY2VSb290IjoiIn0=